<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《我的青春恋爱物语果然有问题》动画版摘抄</title>
    <url>/posts/c917e945/</url>
    <content><![CDATA[<blockquote>
<p>摘编自以前看春物动画版时的笔记，小说笔记有空再整理。</p>
</blockquote>
<h2 id="第一季"><a href="#第一季" class="headerlink" title="第一季"></a>第一季</h2><h3 id="于是-他们那有问题的青春开始了"><a href="#于是-他们那有问题的青春开始了" class="headerlink" title="于是 他们那有问题的青春开始了"></a>于是 他们那有问题的青春开始了</h3><p>所谓青春，是谎言，是罪恶。称颂青春者，无时无刻不在自欺欺人，一厢情愿地对周遭的一切都保持着肯定的态度。只要和青春这个词扯上关系，他们就能扭曲一切通常概念和社会常识。在他们看来，谎言、隐瞒，乃至于罪行和失败，都只不过是青春的调味料罢了。而如果连失败都是青春的证明，难道……那没能成功交到朋友的人，不正应该是最为青春的人才对吗？</p>
<p>富余之人怀着慈悲之心将富余之物赠予匮乏之人，人们将其称为志愿者。</p>
<p>所谓的改，不也是对现状的逃避吗？为什么就不能肯定现在和过去的自己？</p>
<p>我讨厌你这种坦诚接受自己弱点的性格。</p>
<p>雪之下雪乃有着“富余之人”所特有的烦恼，将其隐藏起来，敷衍度日，本应不是难事，因为世上的人都是这样做的。但是，雪之下雪乃却不会这么做，她绝对不会欺骗自己。</p>
<p>“我和她肯定有着某些相似之处”，我突然就冒出了这种莫名其妙的想法。现在就连这样的沉默，都让我感到惬意。心脏的跳动，超过了秒针的速度，仿佛在对我说，速度还要继续飙升。</p>
<p>最起码的努力都不尝试的人，没资格去羡慕有才能的人，那些不成功的人，正是因为无法想象成功者所付出的努力，才无法成功。</p>
<p>努力不会背叛自己，但却可能会背叛梦想。努力不一定就能实现梦想，应该说实现不了的情况更多，但只要有努力过的事实，好歹能够安慰自己。</p>
<h3 id="不管是谁-肯定都同样有着烦恼"><a href="#不管是谁-肯定都同样有着烦恼" class="headerlink" title="不管是谁 肯定都同样有着烦恼"></a>不管是谁 肯定都同样有着烦恼</h3><p>动物基本都是群居的。食肉动物中，存在着等级制度，如果没能成为首领，就会到死都一直承受压力。而食草动物，也应该会烦恼于，要不要在受到天敌袭击时。就像这样，所谓的群体，无法为个体带来任何益处，所以我选择了绝对不会群居的熊的道路。熊是不会对单独一头生活感到不安的孤高生物，而且还能冬眠，这可真是太棒了。</p>
<p>不过，富余之人也有着自己的烦恼，但她的本性很善良。善良，而且一直都很正直。但问题是，这个世界既不善良也不正直，想必她也活得很累吧。</p>
<p>你觉得你那算是在谈话？在我看来根本只是你在单方面地把自己的意见灌输给她。 </p>
<h3 id="恋爱喜剧之神偶尔也会做点好事"><a href="#恋爱喜剧之神偶尔也会做点好事" class="headerlink" title="恋爱喜剧之神偶尔也会做点好事"></a>恋爱喜剧之神偶尔也会做点好事</h3><p>青春总是免不了碰壁啊。</p>
<p>谄媚的时候就要舍弃自尊谄媚到底，这就是我的自尊。</p>
<p>没错，不管遇到什么事，我都是一个人克服的。在你们和人高谈阔论、互相安慰的时候，我都是一个人直面一切。看啊，这才是真正的强者。</p>
<h3 id="总之-他的朋友很少"><a href="#总之-他的朋友很少" class="headerlink" title="总之 他的朋友很少"></a>总之 他的朋友很少</h3><p>不要在真实面前闭上双眼，必须正视现实。</p>
<p>自古以来，在人类的交流活动中，语言只占了三成，剩下的七成都是从眼睛的转动和细微的动作中收集情报。</p>
<h3 id="他再次走上了回头路"><a href="#他再次走上了回头路" class="headerlink" title="他再次走上了回头路"></a>他再次走上了回头路</h3><p>如果你是因为内疚而对我好，那不如不要。</p>
<p>我讨厌温柔的女生，只是说一句话，打一个招呼就让人在意，来往几封邮件就让人心跳加速。如果某天她打电话过来，光是看着通话记录，就会让人不由得露出笑容。但我知道，这只是因为她温柔。对我好的人，对他人也很好，我差点就忘记了这一点。如果真相是残酷的，那谎言一定是温柔的。所以，温柔就是谎言。我一直期待，却总是误会。不知从何时开始，我放弃了希望。久经考验的孤单之人，不会犯同样的错。我是身经百战的强者，在认输这件事上堪称最强。所以，我永远都……讨厌温柔的女生。</p>
<h3 id="他与她的开始-终于结束了"><a href="#他与她的开始-终于结束了" class="headerlink" title="他与她的开始 终于结束了"></a>他与她的开始 终于结束了</h3><p>通过重启双方的关系，让我的心恢复平静，由比滨也从内疚中解脱出来，回归到原来的现充生活，应该是一个不算错误的选择。不，这才是正确的。所以，这件事情就此结束。重启之后，各自回归到原来的日常生活中。虽然人生无法重启，但是人际关系可以<br>如果你只会吸气吐气的话，旁边那台空调都比你强得多。</p>
<p>但理想归理想，并不是现实，所以就显得很假。</p>
<p>我本来就不是故意要卖人情给某个特定的人，所以你也不用特地要还人情给某个特定的人。</p>
<h3 id="不管怎样-说是暑假却没能享受假期绝对有问题"><a href="#不管怎样-说是暑假却没能享受假期绝对有问题" class="headerlink" title="不管怎样 说是暑假却没能享受假期绝对有问题"></a>不管怎样 说是暑假却没能享受假期绝对有问题</h3><p>孤立、孤身一人，这本身并没有什么坏处。问题在于，是因恶意被人孤立的。</p>
<h3 id="他们和她们终将得知真相"><a href="#他们和她们终将得知真相" class="headerlink" title="他们和她们终将得知真相"></a>他们和她们终将得知真相</h3><p>“只要自己改变世界，世界也会改变”，哪有这回事。人都是以固有观念和印象来评价他人的，孤单的人就会被要求一直孤单下去，就算你努力地想要引人注目，也只会成为用来攻击你的弹药。这就是小孩子的国度里已经腐烂透顶的规矩。</p>
<p>提问：世界不会改变，但自己能够改变，那么，你会如何改变？回答：成为新世界的神。</p>
<p>如果是对人际关系有烦恼，那就把人际关系全部破坏，就不需要烦恼了。大家都变成孤单一人，就不会有争吵和冲突了。</p>
<p>人在感觉到真正的恐惧时，就根本顾不上他人了，哪怕牺牲周围的人，也要让自己活命。只要将这丑陋的一面暴露出来，就再也无法好好相处了。</p>
<p>所谓的“不能逃避”是强者的思路。错的并不都是自己。社会，世间，周遭，很多时候都是别人在犯错。所谓的“我能改变自己”，不过是适应了这个犹如垃圾一般冰冷而残酷的世界，承认失败，就此屈从在其脚下的行为，只是硬华丽的辞藻来装饰，连自己都欺骗的谎言罢了。</p>
<p>要靠把某人踩在脚底才能其乐融融的关系，哪可能是真正的友情。但是，如果明知那是虚假的，却还是愿意伸出援手的话，那一定就是真正的友情了。</p>
<h3 id="他第三次走上了回头路"><a href="#他第三次走上了回头路" class="headerlink" title="他第三次走上了回头路"></a>他第三次走上了回头路</h3><p>世上的八成男人，时常会冒出“她是喜欢我吧？”这样的错觉。所以，需要时刻告诫自己，“当然不可能了”。</p>
<p>如果事事都要斤斤计较，可是会让人生变得一片黑暗的。</p>
<p>我并不觉得无知就是坏事，知道得多了，麻烦也会瞬间变多。</p>
<p>我挺喜欢我自己，从没有感到自己很讨厌。不管是基本算是赢家的这一点，还是那半吊子的帅脸，又或是那悲观而现实主义的思考，我一点都不讨厌。但现在，我第一次感到有点讨厌自己了。我认识的雪之下雪乃一直是美丽的、不说谎、诚实的，不依靠任何人，仅凭自己的双脚站得笔直。我一定是向往着这样的雪之下雪乃。自顾自地期待她，自顾自地把理想强加在她身上，自顾自地以为自己了解她，然后自顾自地失望。我已经告诫过自己无数次，结果还是没能治好这个毛病。雪之下雪乃也是会撒谎的，我对连这种理所当然的事情都无法容忍的自己，感到……厌恶。</p>
<h3 id="他们的距离依然没有变化-文化节则已快化为狂欢"><a href="#他们的距离依然没有变化-文化节则已快化为狂欢" class="headerlink" title="他们的距离依然没有变化 文化节则已快化为狂欢"></a>他们的距离依然没有变化 文化节则已快化为狂欢</h3><p>女生真正拒绝的时候，眼神会更加冰冷，几乎是面无表情，然后说出这样的话，可怕得仿佛会让心脏冻结，让人不由得想死。</p>
<p>为什呢迄今都在独自努力的人，就要受到否定？</p>
<h3 id="之后-各自的舞台拉起帷幕-让文化节变成最棒的节目"><a href="#之后-各自的舞台拉起帷幕-让文化节变成最棒的节目" class="headerlink" title="之后 各自的舞台拉起帷幕 让文化节变成最棒的节目"></a>之后 各自的舞台拉起帷幕 让文化节变成最棒的节目</h3><p>“只要自己改变，世界也会改变”这不过是谎话，只不过被冠冕堂堂的谎话强压着做出了妥协。</p>
<p>让一个人受伤，然后将其排挤出去，这样就是“我为人人”啦，常有的事嘛。</p>
<p>你看，虽然人们常说“人”字代表着两个人互相支撑，但分明只是一个人靠在另一个人身上。我觉得，承认必须有人做出牺牲，才是“人”这个概念的重点。</p>
<hr>
<p>雪之下雪乃：我觉得，最好还是解除一下误会比较好。</p>
<p>比企谷八幡：误会是不可能解除的，因为已经有“解”了，这个问题也就此结束。</p>
<p>雪之下雪乃：你在一些无关紧要的小事上整天找借口，但在重要的时候就不找借口了啊。</p>
<p>比企谷八幡：借口根本没有意义，因为人在越是重要的时刻，就越会自作主张。</p>
<hr>
<p>只能让一个集团团结起来的要素是什么？敌人。</p>
<h3 id="即使如此-他和她和她的青春依然永远都有着问题"><a href="#即使如此-他和她和她的青春依然永远都有着问题" class="headerlink" title="即使如此 他和她和她的青春依然永远都有着问题"></a>即使如此 他和她和她的青春依然永远都有着问题</h3><p>游荡的孤高之魂不需要羁绊之地。</p>
<p>想要帮助别人，并不能成为你伤害自己的借口啊。哪怕你已经习惯了痛苦也一样，你该察觉到了，也会有人因为你受伤而感到心痛啊。</p>
<p>我和她没有半点相像，但可能正因为如此，我才会觉得，和她的交谈总是如此新鲜而惬意</p>
<p>人生中，过去的事情再也无法挽回，就连这让人无可奈何的一幕，也终会消失，而同时又觉得我们终将会为这消失而感到后悔。</p>
<h3 id="所以-他们的庆典不会结束"><a href="#所以-他们的庆典不会结束" class="headerlink" title="所以 他们的庆典不会结束"></a>所以 他们的庆典不会结束</h3><p>“重在参与”，出自现代奥林匹克之父皮埃尔•德•顾拜旦男爵的演讲，是广为人知的名言。但这句话不时会被人误用，成为强制别人参加某个活动时的威胁之辞。这个世界上，参加了也没意义的事情那可是多得要命。如果说重在参与，那参与到“不参与阵营”的事情也应该是有意义的。如果任何事都需要体验一下，那去体验一下“不去体验”这件事也应该是有价值的。应该说，不去体验其他人都体验过的事。情，才更为可贵。</p>
<p>庆典过后的庆典也已结束，一切都已成为过去，有些事情也已无法挽回。但不管是哭是笑，日子还是要过，高中生活也有结束的一天。</p>
<h3 id="OVA：我们只好祝愿他们的未来幸福"><a href="#OVA：我们只好祝愿他们的未来幸福" class="headerlink" title="OVA：我们只好祝愿他们的未来幸福"></a>OVA：我们只好祝愿他们的未来幸福</h3><p>婚姻，那是人生的墓场。已婚者们没有例外，都昂然讲述着它的美妙。因为有可以说我回来了的对象而开心，因为看到孩子的睡脸而想着明天也要努力奋斗。但是我希望你们等一等，在老家也可以说我回来了，不要的话去买漱口水对河马说我回来了就好了，还有看到孩子的睡脸就意味着加班地狱。那样真的可以说是幸福吗，宣扬着幸福的他们眼睛和我一样腐烂着，简直就像是把人拉向沼泽的僵尸一般。</p>
<p>根据成长环境的不同人的喜好也会不同，也就是说结婚一定不能说是幸福吧。</p>
<h2 id="第二季"><a href="#第二季" class="headerlink" title="第二季"></a>第二季</h2><h3 id="谁也不知道-他们为何会来侍奉社"><a href="#谁也不知道-他们为何会来侍奉社" class="headerlink" title="谁也不知道 他们为何会来侍奉社"></a>谁也不知道 他们为何会来侍奉社</h3><p>女生口中的好人，100%就是自己无所谓的人。</p>
<h3 id="他和她的表白不会传达给任何人"><a href="#他和她的表白不会传达给任何人" class="headerlink" title="他和她的表白不会传达给任何人"></a>他和她的表白不会传达给任何人</h3><p>鬼屋里的幽灵有什么好怕的，可怕的是人。</p>
<p>与其为了保护什么而不断地做出牺牲，人们都会选择趁早放弃，就连已有的人际关系也是。</p>
<p>如果因此就会破裂，那说明团本就不过如此。就一副表面关系还想着愉快玩耍，这才有问题。</p>
<p>也有人不期望问题得到解决，也有人希望维持现状，很难满足所有人的。</p>
<p>因为重要，因为不想失去，所以隐瞒，所以伪装，所以人们会撒谎。但是，最大的骗子，是我。</p>
<h3 id="悄悄地-雪之下下定了决心"><a href="#悄悄地-雪之下下定了决心" class="headerlink" title="悄悄地 雪之下下定了决心"></a>悄悄地 雪之下下定了决心</h3><p>倒不如说，我人生遇到的事情太少了。人们都说塞翁失马焉知非福，说不定遇到点事情，反而会更顺利。</p>
<p>期望没有改变、停滞不前的世界么。</p>
<p>我们原本就不明白他们在想什么，尽管互相认识，能不能理解也是另一回事。</p>
<p>互相迎合，明明是你我都最讨厌的行为。</p>
<h3 id="然后-由比滨结衣做出宣言"><a href="#然后-由比滨结衣做出宣言" class="headerlink" title="然后 由比滨结衣做出宣言"></a>然后 由比滨结衣做出宣言</h3><p>那可称不上喜欢过。那只是我单方面把意愿强加给了她，只是我自作多情，并不是真正的喜欢。</p>
<h3 id="房间之中-红茶的香气已不复存在"><a href="#房间之中-红茶的香气已不复存在" class="headerlink" title="房间之中 红茶的香气已不复存在"></a>房间之中 红茶的香气已不复存在</h3><p>只要不把问题当问题，那就不是问题。</p>
<p>如果没人给自己问题，如果找不到理由，有些人就无法行动。</p>
<p>如果，仅仅是如果，如果能像游戏一样，回到前一个存档，重新做出选择，那我的人生，会不一样吗？答案是否定的。</p>
<h3 id="顺利地-会议进行着却毫无进展"><a href="#顺利地-会议进行着却毫无进展" class="headerlink" title="顺利地 会议进行着却毫无进展"></a>顺利地 会议进行着却毫无进展</h3><p>自那天以后，她的微笑一如既往，每天的日常也一如既往，每一天都生怕这样的日常溜走。</p>
<p>为了不把失去当做借口，需要比平时更加小心，比平时表现得更加平常。</p>
<h3 id="然而-那个部室里仍旧继续着无法终结的日常"><a href="#然而-那个部室里仍旧继续着无法终结的日常" class="headerlink" title="然而 那个部室里仍旧继续着无法终结的日常"></a>然而 那个部室里仍旧继续着无法终结的日常</h3><p>不断告诫自己，不要违背自己内心定下的应有模样，只是在固执己见罢了。</p>
<p>我以前的做法，确实帮到了不少人。只是，光靠那样肯定是不够的。我的责任是什么？我还不知道这个问题的答案。</p>
<h3 id="尽管如此-比企谷八幡他"><a href="#尽管如此-比企谷八幡他" class="headerlink" title="尽管如此 比企谷八幡他"></a>尽管如此 比企谷八幡他</h3><p>为了将责任分散，便向他人寻求意见、听取建议，结果，便是现状的停滞。最根本的错误，是没能定下谁的权利和责任最大。</p>
<p>内心并不总是等同于感情，有时会得出看似完全不合理的结论，就是因为这个道理。</p>
<p>两个问题的本质都一样，问题的根本是同一个，就是心。</p>
<hr>
<p>平冢静：那就再多想想。如果只会计算，那就算到算出来为止。得出所有答案后，再用排除法一个个排除。最后剩下的，就是你的答案。</p>
<p>比企谷八幡：可就算这样，也弄不明白吧？</p>
<p>平冢静：那要么就是你算错了，要么就是存在疏漏，得重算一遍了。</p>
<p>比企谷八幡：你真是乱来。</p>
<p>平冢静：要是情感能算得出来，早就被电子化了。计算后得不出的答案，那就是人的感情。可就算是我，也总是算错，所以才一直没能结婚吧。</p>
<hr>
<p>思考的时候，不要搞错思考的重点。</p>
<p>你是不可能不伤害她们的，人活着，难免会在无意中伤害到别人，不管是在生前还是死后，都会不断地伤害到他人。与人来往就会伤及他人，而如果拒绝来往来，这个决定本身就可能伤到别人。如果你并不在意对方，便发现不了他因你而伤。我们需要的是自知，要知道，正因珍视，才容易伤及。重视一个人，就意味着要做好伤到他的准备。正因为互相着想，有些东西才无法为自己所得。但是，我们并不需要为之悲伤，反而可以感到骄傲。</p>
<p>在你们的感觉中，这段时间应该就是一切了吧。但事实绝非如此，最后总会得到平衡，世界就是如此运转的。</p>
<hr>
<p>平冢静：现在所经历的并非一切，但有些事情只有现在能做，有些东西只存在于此。你要抓住现在，比企谷。就是现在。去思考，去挣扎，然后在痛苦和煎熬之中烦恼吧，要不然就不真实了。</p>
<p>比企谷八幡：可是，也不代表痛苦过便是真实了吧？</p>
<hr>
<p>为什么我动不动就想去依赖别人？人与人的关系，一定是毒药，不知不觉中，就会依赖成性。</p>
<p>以为说了就能明白，是傲慢的想法，是发话人的自我满足，是受话者的自以为是，并不是所有的事，都能通过解释让人理解。</p>
<p>是啊，无言便能理解是幻想。但是……我并不是想要听你们说什么，我想要的东西真实存在。那绝非是想与人互相理解、友好相处、共度时光，我并非想要获得理解，我是想要理解他人，我想理解，我想知道，我想知道后放心，我想获得安宁，因为无知是巨大的恐惧。想要完全理解，是相当自私、相当专横、相当傲慢的愿望，实在是又无耻又可悲。怀抱着这样愿望的我简直让我厌恶至极。但是如果，如果双方都能这么想…如果存在这样一种关系，能相互容许对方将丑恶的自我满足强加给自己…我知道这样的假设绝不存在，也知道自己得不到这样的关系，可即使这样…即使这样，我也……想要得到真实。</p>
<h3 id="在这之后-雪之下雪乃她"><a href="#在这之后-雪之下雪乃她" class="headerlink" title="在这之后 雪之下雪乃她"></a>在这之后 雪之下雪乃她</h3><p>就是那些嘴边常常挂着个性个性的人，才最没个性。再说，个性怎么可能说变就变的。</p>
<h3 id="各自的掌中明灯照亮之物"><a href="#各自的掌中明灯照亮之物" class="headerlink" title="各自的掌中明灯照亮之物"></a>各自的掌中明灯照亮之物</h3><p>我夸奖你，是为了我自己。</p>
<p>是你自己以为能行，所以就算错了也没敢承认。估计你是想掩饰自己的失败吧，所以才耍计策、玩文字游戏，取得口头证据，以求安心。这样才能在你做错的时候嫁祸于别人，让自己轻松。</p>
<p>说话模棱两可，以为自己明白，却没有任何行动，这样能前进就怪了。</p>
<p>如果能许愿便能实现，如果能渴求便能得到，那我既不会许愿，也不会渴求。得以实现的愿望、获得的东西，那一定都是幻象，终会从指缝中溜走，所以一定会让人止不住地渴求。</p>
<p>世上也有人光是待着就会使周围气氛变糟。</p>
<h3 id="无论何时-叶山隼人都能顺应期待"><a href="#无论何时-叶山隼人都能顺应期待" class="headerlink" title="无论何时 叶山隼人都能顺应期待"></a>无论何时 叶山隼人都能顺应期待</h3><p>她明知道现状是无法维持的，但尽管如此也期望着能够继续待在他的身边。</p>
<p>当人们接近苦行的折返点时，会怎么想？是心怀绝望，想着还有一半，还是松一口气，想着已经过了一半？大多数情况下，都是这两者的其中之一吧。而这两者都会让人心生破绽。</p>
<p>人与人的关系，是不会因为升级和升学而重置的。</p>
<p>当你选了仅有的一条路，那便称不上是自己的选择了吧。</p>
<h3 id="他追求的答案还未触及-真物却不断搞错"><a href="#他追求的答案还未触及-真物却不断搞错" class="headerlink" title="他追求的答案还未触及 真物却不断搞错"></a>他追求的答案还未触及 真物却不断搞错</h3><p>珍视着现在，将现在视为最美好。</p>
<p>一想起过去就会后悔得想死，而展望未来又会担心到忧郁，做一下排除法，现在确实能称得上幸福。</p>
<p>走在路上的时候，是不会回头确认走过多远的。不过，在已经停下脚步的人看来，你们走过多远，就相当于背叛了他们多深。</p>
<p>只是因为没习惯，没经验过，所以，才会以为这只是违和感而已。以为自己能够慢慢习惯，接受。但是她还是没有无视这份违和感。</p>
<p>她的样子，我的样子，我们心中一直都存在着他人规定好的自己，而这又总是与自己不同。“想活出自己的样子”，但那样子，究竟又是谁规定的。</p>
<p>我们的样子，总会在某处产生偏差。那么，真实……真正的我们，究竟在哪里？</p>
<h3 id="春天，在飘零堆叠的雪之下结一而成，抽枝发芽"><a href="#春天，在飘零堆叠的雪之下结一而成，抽枝发芽" class="headerlink" title="春天，在飘零堆叠的雪之下结一而成，抽枝发芽"></a>春天，在飘零堆叠的雪之下结一而成，抽枝发芽</h3><hr>
<p>雪之下雪乃：这里还有只自由自在的鱼呢。</p>
<p>比企谷八幡：是啊，那条鱼挺大的。</p>
<p>雪之下雪乃：没有依靠之处，便也无处寻找容身之所，只能东躲西藏，随波逐流，跟在他人身后，撞上无形的墙壁。</p>
<p>比企谷八幡：你在说哪条鱼？</p>
<p>雪之下雪乃：我自己。</p>
<hr>
<p>一边掩饰着自己的不稳定，一遍悠悠地转着。不会前进，只会在原地不断徘徊。即使如此，也终会……</p>
<p>具体的事情她一样都没说，因为一旦说出口，就会定型，所以她选择避而不谈。</p>
<p>雪之下绝不能将自己的未来交给别人。</p>
<p>我觉得自己很蠢，我明知道这些是不存在的，明知道刨根问底将会一无所得，但即便如此，我还是要穷思苦想、痛苦挣扎。</p>
<p>就算错了也好，每次做错，我都会重新追问，不断追问。</p>
<h3 id="OVA：想必，女孩子是由砂糖、香辛料和某些美好的东西组成的吧"><a href="#OVA：想必，女孩子是由砂糖、香辛料和某些美好的东西组成的吧" class="headerlink" title="OVA：想必，女孩子是由砂糖、香辛料和某些美好的东西组成的吧"></a>OVA：想必，女孩子是由砂糖、香辛料和某些美好的东西组成的吧</h3><hr>
<p>一色伊吕波：这世上根本没有不麻烦的女孩子哦。</p>
<p>比企谷八幡：也是吧，其实根本没有不麻烦的人类吧。</p>
<hr>
<p>女孩子就是用砂糖、香辛料和某种美好的东西做成的，是鹅妈妈童谣吗。一色本身就显得像香辛料，不管加多少砂糖，辣椒还是辣椒。那美好的不可名状之物，缺之不可。</p>
<h2 id="第三季"><a href="#第三季" class="headerlink" title="第三季"></a>第三季</h2><h3 id="不久后，季节变迁，冰雪融化"><a href="#不久后，季节变迁，冰雪融化" class="headerlink" title="不久后，季节变迁，冰雪融化"></a>不久后，季节变迁，冰雪融化</h3><p>长时间的沉默，“感觉谈话会持续很久”似乎有某人这样说道。说出这句话的人也可能是我自己。即使再多花一点时间，这微小的希望也不会有任何增加。我只知道，明确的回答将宣告脆弱的结局。不说出来就不会明白，就算说出来也无法被理解。所以，我应该将我的回答说出来，哪怕明知道自己一定会为那个选择而后悔。说心里话，我根本不想要冰冷残酷、充满悲伤的真物。</p>
<p>男生都是单纯到令人傻眼的，被女生搭个话就会产生误会，一块亲手做的曲奇就会让他们欣喜若狂。所以啊，怎么说呢。只要让对方知道你有多努力，他自然会为你心动不是么。</p>
<h3 id="迄今为止-我从没有触碰过那把钥匙"><a href="#迄今为止-我从没有触碰过那把钥匙" class="headerlink" title="迄今为止 我从没有触碰过那把钥匙"></a>迄今为止 我从没有触碰过那把钥匙</h3><p>我真的没喝醉，说不定我是喝不醉的体质。就算喝再多的酒，身后总有一个冷静的自己，甚至连自己是什么样子都看得清清楚楚，哪怕又笑又闹，心里却总觉得跟自己没关系。</p>
<h3 id="果然-一色伊吕波是最强的学妹"><a href="#果然-一色伊吕波是最强的学妹" class="headerlink" title="果然 一色伊吕波是最强的学妹"></a>果然 一色伊吕波是最强的学妹</h3><p>善始善终，这样说有点太装模作样了吗？</p>
<h3 id="忽然-由比滨结衣开始想象未来"><a href="#忽然-由比滨结衣开始想象未来" class="headerlink" title="忽然 由比滨结衣开始想象未来"></a>忽然 由比滨结衣开始想象未来</h3><p>根本扯不清楚，雪之下之前说母亲比自己更可怕，现在我亲身体会到了，表面上带着柔和的微笑，好像在倾听对方的意见，不知不觉间将对手逼进最初就设好的陷阱的反击流。原来如此，跟这个人讲道理是赢不了的。</p>
<h3 id="感概地-平冢静回忆往昔"><a href="#感概地-平冢静回忆往昔" class="headerlink" title="感概地 平冢静回忆往昔"></a>感概地 平冢静回忆往昔</h3><p>一个问题只要不被视为问题，就构不成问题。然而，在成为问题的瞬间，最简单的做法就是乖乖听上头的话，把麻烦事处理掉。</p>
<hr>
<p>平冢静：考试、就职，或者给自己立下在三十岁之前要达成的目标，都一样。人总会迎接要面对自己的时期。</p>
<p>比企谷八幡：老师也有吗？</p>
<p>平冢静：嗯，当然。有许多想做的事，想成为的模样，不想做的事和不想成为的模样也很多。每次我都会认真选择、挑战、失败、放弃，再度做出选择，如此重复，直到现在，都还是这样。</p>
<hr>
<p>自古以来，彼此的正义产生摩擦时，我认为你们大可更相信一点自己累计至今的成果。</p>
<p>不可能啦，女孩子不会改变自己做的决定，别人为自己做的决定倒是会轻易改变，一不爽还会假装忘记。</p>
<p>可是，我觉得我也该负责，如果我们之前的做法有错，就去寻找不同的做法、不同的想法、不同的干涉法，然后，不管结果如何，我都想负起责任。所以，我想，帮助你。</p>
<h3 id="再一次-比企谷八幡主动攀谈"><a href="#再一次-比企谷八幡主动攀谈" class="headerlink" title="再一次 比企谷八幡主动攀谈"></a>再一次 比企谷八幡主动攀谈</h3><p>如果不在某处做个了断，就会一直拖下去，我们需要一个目的，不如说终点。</p>
<h3 id="直到最后-由比滨结衣都会继续守望"><a href="#直到最后-由比滨结衣都会继续守望" class="headerlink" title="直到最后 由比滨结衣都会继续守望"></a>直到最后 由比滨结衣都会继续守望</h3><p>我们还是老样子，表达方式太过笨拙，我和她都知道，其实有更简单的办法。可是，我不觉得那是正确的。因此，希望至少不要搞错。我怀着祈祷一般的心情，凝视两人。</p>
<h3 id="祈祷着-希望至少别在搞错了"><a href="#祈祷着-希望至少别在搞错了" class="headerlink" title="祈祷着 希望至少别在搞错了"></a>祈祷着 希望至少别在搞错了</h3><p>“守望”听起来很好听，不过到头来，只是在保持距离而已，逃避对方，远离对方，就这样什么都不做的话吧，什么都不会改变。然后，大概，会就这样结束的，我们也好，舞会也好。所以，必须尽量待在附近，主动去干涉。为了好好做个了结，这是必须的。</p>
<p>那只是赝品，我想看的只有真物。</p>
<p>我就直说了。我过得很愉快，这还是第一次，觉得跟别人一起度过的时间自在舒适，我很高兴。我从来没有像这样跟别人争执、吵架、在别人面前哭过。两个人一起出去的时候，也非常紧张，好多事情从来没有体验过，连可以依赖别人都不知道，所以，才会在哪里搞错了，这种像赝品的关系是错的，和你追求的事物肯定不一样。我没问题的，已经没问题了，被你拯救了。所以，这场比赛，这段关系，也到此结束吧。</p>
<h3 id="每当闻到这股香味-一定会想起那个季节"><a href="#每当闻到这股香味-一定会想起那个季节" class="headerlink" title="每当闻到这股香味 一定会想起那个季节"></a>每当闻到这股香味 一定会想起那个季节</h3><p>如果能一直这样跟她交谈，该有多轻松啊。重要的事半句都不提，假装跟平常一样，故意不触及核心。然而，放任自己这么做，就是对自己的背叛。</p>
<p>我表现得好吗，之后有办法表现得更好吗，就像习惯了那段时间、那段空间一样，对这种关系肯定也会习惯吧。</p>
<p>若能在往后的日子，逐一实现她的愿望，脑海中浮现了这种不可能成真的想法。</p>
<h3 id="飒爽地-平冢静迈向前方"><a href="#飒爽地-平冢静迈向前方" class="headerlink" title="飒爽地 平冢静迈向前方"></a>飒爽地 平冢静迈向前方</h3><p>有些男生没借口便不敢跟女生说话。</p>
<p>所以才不置可否，实际上等于没回答吧。</p>
<p>不确实做个了断，会一直闷在心里，永远不会结束。这二十年，我都是这样欺骗自己，所以非常清楚，我一直过着伪物般的人生。比企谷同学，真物这种东西，真的存在吗？</p>
<h3 id="心意-透过肌肤的温度确实传达过来"><a href="#心意-透过肌肤的温度确实传达过来" class="headerlink" title="心意 透过肌肤的温度确实传达过来"></a>心意 透过肌肤的温度确实传达过来</h3><hr>
<p>平冢静：你的心情是能一语带过的吗？</p>
<p>比企谷八幡：怎么可能。要是别人用一句话就想解释，我可受不了。再说，那不是能用话语传达的东西。</p>
<hr>
<p>无法一语概括，就讲到清楚为止，光凭言语不可信，就配合上行动。讲什么做什么都可以，把它们像一个个小点般收集起来，组织成你自己的答案就好。</p>
<p>依靠他人的话语，为表面上的阿谀奉承，这段扭曲得无法挽回的关系，是彻头彻尾的伪物。因此，至少要为这个赝品刻下足以毁坏的伤痕，化作独一无二的真物，结束我那故意搞错的青春。</p>
<p>即使传达不到也要说。倒不如说，阿企你只是没有努力传达吧。</p>
<p>一句话哪里够传达？总有一天，我会做得更好，到时我应该就不用扯这些鬼话和歪理，也能好好传达，好好让人理解了。不过，你不用等我。</p>
<p>就算不顺利，也该好好得出答案，若不确实了断，会一直闷在心里。</p>
<blockquote>
<p><strong>八雪桥</strong></p>
<p>雪之下雪乃：你或许是那样没错，但我会好好去做，一定会做得更好。</p>
<p>比企谷八幡：虽然讲这种话有点难听，我跟你的社交能力都很低，性格过度扭曲，还很不擅长跟人交流，我可不觉得事到如今我们能做得多好。一旦拉开距离，别说是维持关系了，我敢说只会越来越遥远。所以！放开手后，就再也抓不住了。讲这种话真的很难为情，现在感觉超想死的，不过，说要负责这种话根本不够，那不是什么义务感，该说我想负起责任，还是说，希望你让我负责。也许你并不希望，但我想继续跟你保持关系，不是基于义务，而是我个人的意愿。所以，把扭曲你的人生的权利交给我。</p>
<p>雪之下雪乃：“扭曲”是指什么，你讲这句话是什么意思？</p>
<p>比企谷八幡：我的影响力没大到足以改变别人的人生。我们之后大概都会继续升学，心不甘情不愿地就业，过着算得上正常的生活。但如果跟对方扯上关系，可能会开始绕远路或是在原地踏步，产生各种变化吧。所以，人生会有点扭曲。</p>
<p>雪之下雪乃：这样说的话，已经够扭曲了。</p>
<p>比企谷八幡：我也有同感。相遇、交谈、相知、分离，每经过一个阶段，好像。都变得更扭曲。</p>
<p>雪之下雪乃：你本来就够扭曲了吧，虽然我也一样。</p>
<p>比企谷八幡：之后会更加扭曲。不过，既然要扭曲别人的人生，我当然会付出相应的代价。我几乎没有财产，能给的只有时间、感情、将来、人生这些不切实际的东西。我至今的人生没什么了不起，将来大概也没什么前途，不过，既然要干涉别人的人生，不一起赌上自己的人生便不公平。我的一切都给你，让我干涉你的人生吧。</p>
<p>雪之下雪乃：那样不公平，我的未来跟前途，不值得你做到那个地步，你有更加……</p>
<p>比企谷八幡：那我就放心了，我目前为止的人生也没有多少价值，再也没有跌价的空间，简直就是垃圾股，就某种意义上来说，反而可以保证不赔，现在买最划算喔。</p>
<p>雪之下雪乃：这是诈骗犯最常用的话术吧，真是最烂的推销。为什么总是满嘴的油腔滑调，还有其它话可以讲吧。</p>
<p>比企谷八幡：那种话谁会说啊，说出口还得了？</p>
<p>雪之下雪乃：我觉得自己是一个非常麻烦的人。</p>
<p>比企谷八幡：我知道。</p>
<p>雪之下雪乃：会一直添麻烦。</p>
<p>比企谷八幡：又不是一天两天了。</p>
<p>雪之下雪乃：既顽固，又不可爱。</p>
<p>比企谷八幡：嗯，是啊。</p>
<p>雪之下雪乃：这部分希望你否定一下。</p>
<p>比企谷八幡：别强人所难了。</p>
<p>雪之下雪乃：我觉得自己会事事依赖你，越来越堕落。</p>
<p>比企谷八幡：只要我变得更堕落就行。大家一起堕落，就不会有堕落的人。</p>
<p>雪之下雪乃：还有……</p>
<p>比企谷八幡：无所谓。多麻烦，多棘手都无所谓，不如说那样才好。</p>
<p>雪之下雪乃：什么嘛，一点都不高兴……还有别的吧。</p>
<p>比企谷八幡：虽然大概不够作为扭曲你人生的代价，我的一切都交给你，不需要的话随时扔掉都行，若嫌麻烦也大可忘掉，这全是我的自作主张，所以你不必答复。</p>
<p>雪之下雪乃：那我就好好说清楚。请把你的人生交给我。</p>
<p>比企谷八幡：好沉重。</p>
<p>雪之下雪乃：有什么办法，我不知道还能怎么说。</p>
</blockquote>
<h3 id="我的青春恋爱物语果然有问题"><a href="#我的青春恋爱物语果然有问题" class="headerlink" title="我的青春恋爱物语果然有问题"></a>我的青春恋爱物语果然有问题</h3><p>我知道她自己站得起来，也知道她八成会这么说。尽管如此，我还是会伸出手。今后，我大概也会一直这么做。</p>
<p>无论找什么样的理由，都不可能让所有人服气。</p>
<p>负起责任就是负责人的工作。</p>
<p>如果对一个女生产生共鸣、熟稔、怜悯、尊敬、嫉妒以及在这些之上的感情，那肯定不只是喜欢。所以，无法分开、离别，即使隔着一段距离依然会随着时间互相吸引，那或许就能称为真物。</p>
]]></content>
      <categories>
        <category>摘抄</category>
      </categories>
      <tags>
        <tag>金句</tag>
        <tag>番剧</tag>
        <tag>春物</tag>
      </tags>
  </entry>
  <entry>
    <title>比赛复盘 | 2023华为软件精英挑战赛</title>
    <url>/posts/df4104a6/</url>
    <content><![CDATA[<h2 id="比赛简介"><a href="#比赛简介" class="headerlink" title="比赛简介"></a>比赛简介</h2><h3 id="比赛主页"><a href="#比赛主页" class="headerlink" title="比赛主页"></a>比赛主页</h3><p><a href="https://competition.huaweicloud.com/codecraft2023">2023华为软件精英挑战赛——普朗克计划</a></p>
<h3 id="比赛题目"><a href="#比赛题目" class="headerlink" title="比赛题目"></a>比赛题目</h3><p>初赛：选手程序操控4个机器人执行前进、后退、旋转、购买、出售等动作来完成物品递送任务，同时赚取差价获得利润。在运行结束时，选手拥有的资金数即为最终分数，所获得的资金越高越好。</p>
<p>复赛：引入复杂固定障碍。</p>
<p>决赛：引入激光雷达，两队对抗战。</p>
<p>彩蛋题：引入激光探图机制，不提供地图数据。</p>
<blockquote>
<p>在这个彩蛋当中，没有对手，有的只是你不断的超越自己；也没有比赛奖励，有的只是你在攻克了一道道技术难题之后所收获的兴奋与成长。希望所有的参赛选手，能够喜欢赛题组精心准备的这份礼物。</p>
<p style="text-align: right;">——2023软挑赛题组</p>
</blockquote>
<details class="toggle" ><summary class="toggle-button" style="">赛题相关材料链接</summary><div class="toggle-content"><p>初赛练习赛：<a href="https://bbs.huaweicloud.com/forum/thread-0225113791152139025-1-1.html">https://bbs.huaweicloud.com/forum/thread-0225113791152139025-1-1.html</a></p>
<p>初赛正式赛：<a href="https://bbs.huaweicloud.com/forum/thread-0219115001097335002-1-1.html">https://bbs.huaweicloud.com/forum/thread-0219115001097335002-1-1.html</a></p>
<p>复赛练习赛：<a href="https://bbs.huaweicloud.com/forum/thread-0276115433925333002-1-1.html">https://bbs.huaweicloud.com/forum/thread-0276115433925333002-1-1.html</a></p>
<p>复赛正式赛：<a href="https://bbs.huaweicloud.com/forum/thread-0217116396999188032-1-1.html">https://bbs.huaweicloud.com/forum/thread-0217116396999188032-1-1.html</a></p>
<p>决赛练习赛：<a href="https://bbs.huaweicloud.com/forum/thread-0298116469469619076-1-1.html">https://bbs.huaweicloud.com/forum/thread-0298116469469619076-1-1.html</a></p>
<p>决赛正式赛：<a href="https://bbs.huaweicloud.com/forum/thread-0232117504867893010-1-1.html">https://bbs.huaweicloud.com/forum/thread-0232117504867893010-1-1.html</a></p>
<p>彩蛋题：<a href="https://bbs.huaweicloud.com/forum/thread-0232118049695936048-1-1.html">https://bbs.huaweicloud.com/forum/thread-0232118049695936048-1-1.html</a></p>
<blockquote>
<p>彩蛋题资料中包含SimpleDemo源码，并且可以同时运行于初赛、复赛、决赛、彩蛋题。</p>
</blockquote>
</div></details>

<h2 id="初赛策略"><a href="#初赛策略" class="headerlink" title="初赛策略"></a>初赛策略</h2><p>初赛赛题需要考虑的情况不算复杂，所以使用的各项策略也十分简单，使用Python编程。</p>
<h3 id="运动控制"><a href="#运动控制" class="headerlink" title="运动控制"></a>运动控制</h3><p>因为机器人的运动并不是简单的线性运动，准确控制需要根据提供的机器人各项物理参数求解运动方程，并且给出的参数都是如电机最大扭矩之类的，而实际运动中电机扭矩是随运动幅度变化的，所以计算会比较复杂。为了避免复杂的运动控制计算（<del>其实是不想做</del>），我采用了最为简单的PID算法来控制机器人的旋转，实现后发现只要P的效果也足够用了（测试发现机器人运动摩擦力非常大，故振荡较小），所以最终实现起来非常简单，以下为核心代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方向调整控制</span></span><br><span class="line">expected_angle = calculate_angle(bot_id, table_id)  <span class="comment"># 计算目标方向角</span></span><br><span class="line"><span class="comment"># 目标方向和当前方向之差大于pi时需要转换</span></span><br><span class="line"><span class="keyword">if</span> numpy.<span class="built_in">abs</span>(expected_angle - bot[<span class="string">&#x27;direction&#x27;</span>]) &gt; numpy.pi:</span><br><span class="line">    <span class="comment"># 当前朝向先做转换变到与目标方向同号</span></span><br><span class="line">    <span class="comment"># 当前朝向方向角为0不需要转换</span></span><br><span class="line">    <span class="comment"># 转换结果只在临时变量中用于计算偏差角，并不修改数据字典中的值</span></span><br><span class="line">    <span class="keyword">if</span> bot[<span class="string">&#x27;direction&#x27;</span>] &lt; <span class="number">0</span>:</span><br><span class="line">        bot[<span class="string">&#x27;direction&#x27;</span>] += <span class="number">2</span> * numpy.pi</span><br><span class="line">    <span class="keyword">elif</span> bot[<span class="string">&#x27;direction&#x27;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        bot[<span class="string">&#x27;direction&#x27;</span>] -= <span class="number">2</span> * numpy.pi</span><br><span class="line"><span class="comment"># 控制旋转速度，偏差角度越大角速度越大</span></span><br><span class="line"><span class="keyword">if</span> expected_angle - bot[<span class="string">&#x27;direction&#x27;</span>] &lt; <span class="number">0</span>:</span><br><span class="line">    command[<span class="string">&#x27;rotate&#x27;</span>][bot_id] = -min_rotate_velocity + angular_velocity_kp * (expected_angle - bot[<span class="string">&#x27;direction&#x27;</span>])</span><br><span class="line"><span class="keyword">elif</span> expected_angle - bot[<span class="string">&#x27;direction&#x27;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">    command[<span class="string">&#x27;rotate&#x27;</span>][bot_id] = min_rotate_velocity + angular_velocity_kp * (expected_angle - bot[<span class="string">&#x27;direction&#x27;</span>])</span><br><span class="line"><span class="comment"># 到达偏差角阈值以最大速度前进</span></span><br><span class="line"><span class="keyword">if</span> numpy.<span class="built_in">abs</span>(expected_angle - bot[<span class="string">&#x27;direction&#x27;</span>]) &lt; start_move_angle_threshold:</span><br><span class="line">    command[<span class="string">&#x27;forward&#x27;</span>][bot_id] = max_forward_velocity</span><br><span class="line"><span class="comment"># 否则以最小速度前进</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    command[<span class="string">&#x27;forward&#x27;</span>][bot_id] = min_forward_velocity</span><br></pre></td></tr></table></figure>

<p>可见核心就只是系数乘偏差角，即可得到还算能用的控制效果。</p>
<p>除此之外，还有一些用于辅助控制的代码不在此处列出，比如接近目的地时减速刹车，基本也是通过P算法来实现。</p>
<h3 id="避障"><a href="#避障" class="headerlink" title="避障"></a>避障</h3><p>避障是基于VO算法思想，随手写的一个简易避障算法。因为没有精确的运动控制，只能沿用简单的P算法控制，再加上这是简单的单目标避障，最终效果并不好（特别是一个机器人跟在另一个机器人背后同向前进时）。以下是核心代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算碰撞区</span></span><br><span class="line">collision_area_half_angle = numpy.arcsin(</span><br><span class="line">    (bot_1_radius + bot_2_radius) / distance_list[bot_id_2])  <span class="comment"># 碰撞区半角</span></span><br><span class="line"><span class="comment"># 适当增加碰撞区半角，但不超出最大值</span></span><br><span class="line"><span class="keyword">if</span> collision_area_half_angle * collision_area_half_angle_kp &gt; numpy.pi / <span class="number">2</span>:</span><br><span class="line">    collision_area_half_angle = numpy.pi / <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    collision_area_half_angle *= collision_area_half_angle_kp</span><br><span class="line">collision_area_center_angle = calculate_angle_between_bot(bot_id_1, bot_id_2)  <span class="comment"># 碰撞区中心方向角</span></span><br><span class="line">collision_area_left_boundary_angle = collision_area_center_angle + collision_area_half_angle  <span class="comment"># 碰撞区左边界方向角</span></span><br><span class="line">collision_area_right_boundary_angle = collision_area_center_angle - collision_area_half_angle  <span class="comment"># 碰撞区右边界角</span></span><br><span class="line"><span class="comment"># 计算机器人1相对于机器人2的速度</span></span><br><span class="line">bot_1_relative_velocity_x = bot_1[<span class="string">&#x27;linear_velocity&#x27;</span>][<span class="number">0</span>] - bot_2[<span class="string">&#x27;linear_velocity&#x27;</span>][<span class="number">0</span>]  <span class="comment"># x方向相对速度</span></span><br><span class="line">bot_1_relative_velocity_y = bot_1[<span class="string">&#x27;linear_velocity&#x27;</span>][<span class="number">1</span>] - bot_2[<span class="string">&#x27;linear_velocity&#x27;</span>][<span class="number">1</span>]  <span class="comment"># y方向相对速度</span></span><br><span class="line">bot_1_relative_velocity_angle = numpy.arctan2(bot_1_relative_velocity_y,</span><br><span class="line">                                                bot_1_relative_velocity_x)  <span class="comment"># 相对速度方向</span></span><br><span class="line"><span class="comment"># 如果相对速度方向和碰撞区中心方向角之差大于pi（例如碰撞区是负角度，但相对速度方向在其+2pi后的正角度区间内）</span></span><br><span class="line"><span class="keyword">if</span> numpy.<span class="built_in">abs</span>(bot_1_relative_velocity_angle - collision_area_center_angle) &gt; numpy.pi:</span><br><span class="line">    <span class="comment"># 变换到同号区间</span></span><br><span class="line">    <span class="keyword">if</span> bot_1_relative_velocity_angle &lt; <span class="number">0</span>:</span><br><span class="line">        bot_1_relative_velocity_angle += <span class="number">2</span> * numpy.pi</span><br><span class="line">    <span class="keyword">elif</span> bot_1_relative_velocity_angle &gt; <span class="number">0</span>:</span><br><span class="line">        bot_1_relative_velocity_angle -= <span class="number">2</span> * numpy.pi</span><br><span class="line"><span class="comment"># 如果相对速度方向在碰撞区内则会发生碰撞（恰巧在边界会相切，所以也避免），需要避让</span></span><br><span class="line"><span class="keyword">if</span> collision_area_right_boundary_angle &lt; bot_1_relative_velocity_angle &lt; collision_area_left_boundary_angle:</span><br><span class="line">    <span class="comment"># 检测离哪边边界近就往哪边转，直接和中心方向角比较即可</span></span><br><span class="line">    <span class="comment"># 离右边界近</span></span><br><span class="line">    <span class="keyword">if</span> bot_1_relative_velocity_angle &lt; collision_area_center_angle:</span><br><span class="line">        command[<span class="string">&#x27;rotate&#x27;</span>][bot_id_1] = min_rotate_velocity + angular_velocity_kp * (</span><br><span class="line">                collision_area_right_boundary_angle - bot_1_relative_velocity_angle)</span><br><span class="line">    <span class="comment"># 离左边界近</span></span><br><span class="line">    <span class="keyword">elif</span> bot_1_relative_velocity_angle &gt; collision_area_center_angle:</span><br><span class="line">        command[<span class="string">&#x27;rotate&#x27;</span>][bot_id_1] = min_rotate_velocity + angular_velocity_kp * (</span><br><span class="line">                collision_area_left_boundary_angle - bot_1_relative_velocity_angle)</span><br><span class="line">    <span class="comment"># 恰好位于中间</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 查看目前的角速度方向，往当前已有的角速度方向转，角速度为0则默认顺时针旋转</span></span><br><span class="line">        <span class="comment"># 角速度大于0，即逆时针旋转中</span></span><br><span class="line">        <span class="keyword">if</span> bot_1[<span class="string">&#x27;angular_velocity&#x27;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            command[<span class="string">&#x27;rotate&#x27;</span>][bot_id_1] = min_rotate_velocity + angular_velocity_kp * (</span><br><span class="line">                    collision_area_left_boundary_angle - bot_1_relative_velocity_angle)</span><br><span class="line">        <span class="comment"># 角速度小于0，即顺时针旋转中</span></span><br><span class="line">        <span class="keyword">elif</span> bot_1[<span class="string">&#x27;angular_velocity&#x27;</span>] &lt; <span class="number">0</span>:</span><br><span class="line">            command[<span class="string">&#x27;rotate&#x27;</span>][bot_id_1] = min_rotate_velocity + angular_velocity_kp * (</span><br><span class="line">                    collision_area_right_boundary_angle - bot_1_relative_velocity_angle)</span><br><span class="line">        <span class="comment"># 角速度为0，默认顺时针旋转</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            command[<span class="string">&#x27;rotate&#x27;</span>][bot_id_1] = min_rotate_velocity + angular_velocity_kp * (</span><br><span class="line">                    collision_area_right_boundary_angle - bot_1_relative_velocity_angle)</span><br></pre></td></tr></table></figure>

<p>可见算法依然十分<del>暴力</del>简单，如果有更好的运动控制算法，避障算法也不至于做得这么简陋（算法其实后期优化过，但测试效果不好故没有保留）。至于上文所说的当一个机器人跟在另一个机器人背后同向而行时会出现问题，就是在这种情况下若被判定为会碰撞，两个机器人都会执行避让（实际上前面的机器人并不需要避让，甚至后面的也可能不需要避让），然后两个机器人都开始偏离目标角度并减速，最终导致两机器人相距很近相互纠缠着低速前进，直到分开。这个问题可以在出现这种情况时禁止前面的机器人执行避障来解决。</p>
<h3 id="任务分配"><a href="#任务分配" class="headerlink" title="任务分配"></a>任务分配</h3><p>任务分配的基础策略是根据产品优先级：<code>7 &gt; (4, 5, 6) &gt; (1, 2, 3)</code>，当机器人空闲的时候会按照此优先级去购买产品。对于同等优先级内的产品，采用的策略是机器人从当前位置到购买工作台的距离与从购买工作台到出售工作台的距离之和最短来选取购买和出售两个目标工作台。</p>
<p>除此之外还有几个强化策略，分别是抢占购买、原地购买、动态优先级和禁用工作台。</p>
<ul>
<li><p><strong>抢占购买</strong>是当某机器人空闲时发现某已分配的任务由它来执行比原执行该任务的机器人剩余路径短得多，则抢占该任务执行，被抢占机器人重新分配任务。</p>
</li>
<li><p><strong>原地购买</strong>是当机器人出售完物品后，其所在工作台有需要购买的产品已生产完毕或剩余生产时间很短，则原地购买该工作台的产品去出售，这个策略也带有抢占性质。</p>
</li>
<li><p><strong>动态优先级</strong>（正式赛加入）是在某些4、5、6物品合成非常不平均的情况下使用的策略，通过改变产品优先级来优先分配合成当前数量较少的物品的任务，达到平衡4、5、6物品数量的目的，有利于物品7的合成。</p>
</li>
<li><p><strong>禁用工作台</strong>（正式赛加入）是当工作台数量过多时使用的策略，用于避免合成原料过于分散。虽然可以通过判断工作台原材料格情况来决定先出售到哪个工作台，以此使原料更集中，但是实际测试中发现通过简单直接的禁用部分工作台的方法即可解决这个问题并得到不错的效果。</p>
</li>
</ul>
<h3 id="正式赛针对性优化"><a href="#正式赛针对性优化" class="headerlink" title="正式赛针对性优化"></a>正式赛针对性优化</h3><p>动态优先级和禁用工作台策略实际上就是针对正式赛地图优化的产物，除此之外还有还有其他针对性的小措施，如调整出售工作台类别等，基本都没有通用性。</p>
<h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>初赛正式赛四张图分数分别是684678、771579、824985、641533，共2922775分，位列粤港澳赛区第58名（粤港澳真的太卷了啊）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不得不说，今年软挑的题目十分有趣好玩，赛题组也十分用心。看着小机器人从跌跌撞撞不会走路到丝滑移动甚至漂移避障，每一次改进策略后分数的提升都能给我带来一阵喜悦。</p>
<p>第一次参加软挑，没什么经验，大部分算法纯属自己瞎整，各种不想写复杂算法的妥协如滚雪球般慢慢积累，最终很多地方不得不一再妥协、简化，导致效果并不好，这是一大败笔。基础算法是一定要做好的，否则会影响后续各种算法的发挥。</p>
<p>总的来说，参赛体验十分不错，明年再战！</p>
<blockquote>
<p>完整代码链接：<a href="https://github.com/WJD1005/HUAWEI-CodeCraft2023">https://github.com/WJD1005/HUAWEI-CodeCraft2023</a></p>
</blockquote>
]]></content>
      <categories>
        <category>比赛复盘</category>
      </categories>
      <tags>
        <tag>华为</tag>
        <tag>软挑</tag>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>比赛复盘 | 2023华为嵌入式软件大赛</title>
    <url>/posts/f6b10e75/</url>
    <content><![CDATA[<h2 id="比赛简介"><a href="#比赛简介" class="headerlink" title="比赛简介"></a>比赛简介</h2><h3 id="比赛主页"><a href="#比赛主页" class="headerlink" title="比赛主页"></a>比赛主页</h3><p><a href="https://developer.huaweicloud.com/contest/2023controlrush.html">2023华为嵌入式软件大赛_华为云</a></p>
<h3 id="比赛题目"><a href="#比赛题目" class="headerlink" title="比赛题目"></a>比赛题目</h3><p>初赛：设计一套算法对光纤部署进行优化，主要解决在光网络中如何在满足多种约束的情况下（放大器约束、通道约束等）合理分配业务传输路径与选择通道，以及扩容光网络时如何合理安排使成本最小。</p>
<p>复赛：为了提高光网络的可靠性，部分光业务需要规划多条路径，这些路径同源同宿，但彼此之间不能有相同的边。当光业务的路径数量为2时，这两条路径分配的通道必须相同；当光业务的路径数量大于2时，这些路径分配的通道可以不同。</p>
<h2 id="初赛策略"><a href="#初赛策略" class="headerlink" title="初赛策略"></a>初赛策略</h2><p>初赛期间主要设计了基本的分配与扩容方案，没有设计迭代优化算法来对已经分配好的光网络进行调整，导致成本不算特别低，只拿到了第三名的成绩。在初赛之后通过自主设计判题器来辅助测试，设计了新的网络迭代优化算法，成功使成本大幅度降低。以下对最终代码中的部分重要算法进行解析。</p>
<h3 id="存图"><a href="#存图" class="headerlink" title="存图"></a>存图</h3><p>采用链式前向星为基础存图方案，便于后续对一个节点出发的边进行遍历。按照赛题每一条边应为双向边，但为了链式前向星本身的特点和兼容性考虑，采用单向边存图，即对于每一条光网络中的边当作两条方向不同的单向边进行储存。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> from, to, d, next;    <span class="comment">// 起点，终点，边的距离，同起点的下一条边在edge中的编号</span></span><br><span class="line">    <span class="type">int</span> trueD;    <span class="comment">// 边的真正距离</span></span><br><span class="line">    <span class="type">int</span> Pile[maxP]; <span class="comment">// 该边上存在的通道，记录的是当前承载的业务的编号，不承载业务时值为-1</span></span><br><span class="line">    <span class="type">int</span> usedPileCnt;</span><br><span class="line">    <span class="built_in">Edge</span>() &#123;</span><br><span class="line">        from = <span class="number">-1</span>;</span><br><span class="line">        to = <span class="number">-1</span>;</span><br><span class="line">        d = <span class="number">0</span>;</span><br><span class="line">        next = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge[maxM];    <span class="comment">// 边集数组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>要注意<code>d</code>并非边的距离，因为寻路方案分为Dijkstra和BFS，曾经在使用Dijkstra来模仿BFS来忽略距离进行最少边数搜索的时候将<code>d</code>置为1来实现，边真正的距离为<code>trueD</code>。</p>
</blockquote>
<h3 id="业务寻路"><a href="#业务寻路" class="headerlink" title="业务寻路"></a>业务寻路</h3><p>在一开始寻路采用Dijkstra算法作为基础来搜寻最短路径，但实际上路径长度对成本的影响不大，如果业务只占用更少的边会对后续其他业务的分配更有利，故应该寻找最少边数。通过将边的<code>d</code>置为1即可使用Dijkstra寻找最少边数路径，后续直接使用BFS来实现，每一个使用BFS的函数都有对应的使用了Dijkstra算法的版本，可能因为遍历顺序的原因采用<code>d</code>全为1的Dijkstra算法进行寻路比采用BFS的成本略小，但是使用BFS可以使算法整体效率得到较大提升。以下仅说明以BFS为基础算法的函数，与之同序号的使用Dijkstra为基础算法的函数逻辑与功能均与之一致。</p>
<p>首先是<code>BFS3</code>，用于寻找不考虑通道堵塞下的最短路径，就是一个纯粹的、无约束的BFS寻路，用于构建最短路径长度表方便后续实际寻路进行比较与判断。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS3</span><span class="params">(Business&amp; bus)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> start = bus.start, end = bus.end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minPathSize.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(start, end)) != minPathSize.<span class="built_in">end</span>())   <span class="comment">// 键存在，无需再次查找</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    bus.trueMinPath.<span class="built_in">resize</span>(N, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123; <span class="comment">// 赋初值</span></span><br><span class="line">        vis1[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; bfsQ;</span><br><span class="line">    bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(start, <span class="number">0</span>));</span><br><span class="line">    vis1[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> s = start;</span><br><span class="line">    <span class="type">int</span> curLevel = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> getOutFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!bfsQ.<span class="built_in">empty</span>() &amp;&amp; !getOutFlag) &#123;</span><br><span class="line"></span><br><span class="line">        s = bfsQ.<span class="built_in">front</span>().first;</span><br><span class="line">        curLevel = bfsQ.<span class="built_in">front</span>().second;</span><br><span class="line">        bfsQ.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[s]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">            <span class="type">int</span> t = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (vis1[t])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            vis1[t] = <span class="literal">true</span>;</span><br><span class="line">            bus.trueMinPath[t] = i;    <span class="comment">// 记录下抵达路径点t的边的编号i</span></span><br><span class="line">            <span class="keyword">if</span> (t == end) &#123;</span><br><span class="line">                getOutFlag = <span class="literal">true</span>;</span><br><span class="line">                s = t;</span><br><span class="line">                ++curLevel;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(t, curLevel + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    minPathSize[<span class="built_in">make_pair</span>(start, end)] = curLevel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BFS1</code>用于考虑通道的情况下寻找最少边数路径，基本逻辑是遍历每一条通道，然后使用BFS寻路，且在寻路时判断该边该通道是否已经被占用，被占用则该条边不能使用。有两个特殊情况就是如果在寻路之前已经调用过加边的函数，则找到一条路径即立刻跳出寻路，不再遍历其他通道，因为此时因为加了新边有很大概率是通畅的；另一个则是当找到的路径特别长时，放弃这条路径，因为特别长的路径虽然不会直接增加太多成本，但是会让整个网络更加堵塞，不利于全局降低成本。如果遍历完成依然找不到合适的路径，则先执行删边操作调整目前网络中冗余的边然后再执行加边。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS1</span><span class="params">(Business&amp; bus, <span class="type">bool</span> ifLoadNewEdge)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> start = bus.start, end = bus.end, p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> addNewEdgeCnt = <span class="number">0</span>;  <span class="comment">// 加边次数（不是边数）</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> addNewBus = <span class="number">0</span>;   <span class="comment">// 加业务次数</span></span><br><span class="line">    ++addNewBus;</span><br><span class="line">    <span class="type">bool</span> findPath = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> minPathDist = INF;</span><br><span class="line">    <span class="type">int</span> choosenP = <span class="number">-1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tmpOKPath;</span><br><span class="line">    <span class="type">double</span> maxValue = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调整通道遍历顺序有概率使业务分配得更均匀</span></span><br><span class="line">    <span class="keyword">if</span> (addNewBus % <span class="number">2</span>)</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        p = P - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addNewBus % <span class="number">2</span>) &#123;</span><br><span class="line">            ++p;</span><br><span class="line">            <span class="keyword">if</span> (p &gt;= P)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            --p;</span><br><span class="line">            <span class="keyword">if</span> (p &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tmpOKPath.<span class="built_in">resize</span>(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123; <span class="comment">// 赋初值</span></span><br><span class="line">            vis1[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; bfsQ;</span><br><span class="line">        <span class="comment">//queue&lt;Node2&gt; bfsq;</span></span><br><span class="line">        bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(start, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">//bfsq.push(Node2(start, 0, 0));</span></span><br><span class="line">        vis1[start] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> s = start;</span><br><span class="line">        <span class="type">int</span> curLevel = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//int totUsedPileCnt = 0;</span></span><br><span class="line">        <span class="type">bool</span> getOutFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!bfsQ.<span class="built_in">empty</span>() &amp;&amp; !getOutFlag) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Node2 tmpNode = bfsq.front();</span></span><br><span class="line">            s = bfsQ.<span class="built_in">front</span>().first;</span><br><span class="line">            <span class="comment">//s = tmpNode.nodeId;</span></span><br><span class="line">            curLevel = bfsQ.<span class="built_in">front</span>().second;</span><br><span class="line">            <span class="comment">//curLevel = tmpNode.curLevel;</span></span><br><span class="line">            <span class="comment">//totUsedPileCnt = tmpNode.usedPileCnt;</span></span><br><span class="line">            bfsQ.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="comment">//bfsq.pop();</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[s]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (edge[i].Pile[p] == <span class="number">-1</span>) &#123;        <span class="comment">// pile未被占用时，才试图走该边</span></span><br><span class="line">                    <span class="type">int</span> t = edge[i].to;</span><br><span class="line">                    <span class="keyword">if</span> (vis1[t])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    vis1[t] = <span class="literal">true</span>;</span><br><span class="line">                    tmpOKPath[t] = i;    <span class="comment">// 记录下抵达路径点t的边的编号i</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (t == end) &#123;</span><br><span class="line">                        getOutFlag = <span class="literal">true</span>;</span><br><span class="line">                        s = t;</span><br><span class="line">                        ++curLevel;</span><br><span class="line">                        <span class="comment">//totUsedPileCnt += edge[i].usedPileCnt;</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(t, curLevel + <span class="number">1</span>));</span><br><span class="line">                        <span class="comment">//bfsq.push(Node2(t, curLevel + 1, totUsedPileCnt + edge[i].usedPileCnt));</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s == end) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//if (minPathSize.find(make_pair(start, end)) == minPathSize.end())   // 键不存在</span></span><br><span class="line">            <span class="comment">//    minPathSize[make_pair(start, end)] = curLevel;</span></span><br><span class="line">            <span class="comment">//else if (minPathSize[make_pair(start, end)] &gt; curLevel) &#123;</span></span><br><span class="line">            <span class="comment">//    minPathSize[make_pair(start, end)] = curLevel;</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (minPathSize[<span class="built_in">make_pair</span>(start, end)] * goodBadGap &gt; curLevel)</span><br><span class="line">                bus.isBusWellAllocate = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                bus.isBusWellAllocate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ifLoadNewEdge) &#123;    <span class="comment">// 如果BFS1在调用前已经添加了新边，则可以一遍过</span></span><br><span class="line">                bus.pathTmp = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(tmpOKPath.<span class="built_in">begin</span>(), tmpOKPath.<span class="built_in">end</span>());</span><br><span class="line">                choosenP = p;</span><br><span class="line">                findPath = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (curLevel &gt; <span class="number">3</span> * minPathSize[<span class="built_in">make_pair</span>(start, end)])  <span class="comment">// 找到的路径长度太长，宁愿不要</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> curNode = end, tmpDist = curLevel;</span><br><span class="line">            <span class="keyword">if</span> (tmpDist &lt; minPathDist) &#123;</span><br><span class="line">                minPathDist = tmpDist;</span><br><span class="line">                bus.pathTmp = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(tmpOKPath.<span class="built_in">begin</span>(), tmpOKPath.<span class="built_in">end</span>());</span><br><span class="line">                choosenP = p;</span><br><span class="line">            &#125;</span><br><span class="line">            findPath = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (findPath == <span class="literal">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ifTryDeleteEdge) &#123;</span><br><span class="line">            <span class="keyword">if</span> (T &gt; <span class="number">3500</span> &amp;&amp; T &lt;= <span class="number">4000</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="comment">/*++addNewEdgeCnt % 2 == 0 &amp;&amp; */</span>(bus.start != buses[bus.busId - <span class="number">1</span>].start || bus.end != buses[bus.busId - <span class="number">1</span>].end))</span><br><span class="line">                    <span class="built_in">tryDeleteEdge</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="comment">/*++addNewEdgeCnt % 2 == 0 &amp;&amp; */</span>(bus.start != buses[bus.busId - <span class="number">1</span>].start || bus.end != buses[bus.busId - <span class="number">1</span>].end))</span><br><span class="line">                    <span class="built_in">tryDeleteEdge</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BFS2(bus);       // 旧的加边策略，一但加边，整个路径都会加，但全局性能是当前最好的</span></span><br><span class="line">        <span class="built_in">BFS7</span>(bus);       <span class="comment">// 新加边策略，只加最短路径上需要进行加边的边</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> curNode = end;</span><br><span class="line">    bus.pileId = choosenP;</span><br><span class="line">    <span class="keyword">while</span> (bus.pathTmp[curNode] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> edgeId = bus.pathTmp[curNode];  <span class="comment">// 存储于edge数组中真正的边的Id</span></span><br><span class="line">        ++node[curNode].passBusCnt;     <span class="comment">// 经过节点的业务数加1</span></span><br><span class="line"></span><br><span class="line">        bus.path.<span class="built_in">push_back</span>(edgeId / <span class="number">2</span>); <span class="comment">// edgeId / 2是为了适应题目要求</span></span><br><span class="line">        edge[edgeId].Pile[choosenP] = bus.busId;</span><br><span class="line">        ++edge[edgeId].usedPileCnt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (edgeId % <span class="number">2</span>) &#123;   <span class="comment">// 奇数-1</span></span><br><span class="line">            edge[edgeId - <span class="number">1</span>].Pile[choosenP] = bus.busId;   <span class="comment">// 双向边，两边一起处理</span></span><br><span class="line">            ++edge[edgeId - <span class="number">1</span>].usedPileCnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">// 偶数+1</span></span><br><span class="line">            edge[edgeId + <span class="number">1</span>].Pile[choosenP] = bus.busId;</span><br><span class="line">            ++edge[edgeId + <span class="number">1</span>].usedPileCnt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curNode = edge[bus.pathTmp[curNode]].from;</span><br><span class="line">    &#125;</span><br><span class="line">    ++node[curNode].passBusCnt;     <span class="comment">// 经过节点的业务数加1</span></span><br><span class="line">    <span class="built_in">reverseArray</span>(bus.path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="加边扩容"><a href="#加边扩容" class="headerlink" title="加边扩容"></a>加边扩容</h3><p>在业务寻路失败的时候，就需要进行加边操作，加边操作有两个函数，分别是<code>BFS2</code>和<code>BFS7</code>。</p>
<p><code>BFS2</code>类似于<code>BFS3</code>，是一个纯粹的BFS无约束寻路，其加边思想为不考虑通道堵塞直接寻找最少边数路径，然后直接对整条路径上的所有原有的边都进行加边操作，然后重新交给<code>BFS1</code>进行寻路。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS2</span><span class="params">(Business&amp; bus)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> start = bus.start, end = bus.end;</span><br><span class="line"></span><br><span class="line">    bus.trueMinPath.<span class="built_in">resize</span>(N, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123; <span class="comment">// 赋初值</span></span><br><span class="line">        vis1[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; bfsQ;</span><br><span class="line">    bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(start, <span class="number">0</span>));</span><br><span class="line">    vis1[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> s = start;</span><br><span class="line">    <span class="type">int</span> curLevel = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> getOutFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!bfsQ.<span class="built_in">empty</span>() &amp;&amp; !getOutFlag) &#123;</span><br><span class="line"></span><br><span class="line">        s = bfsQ.<span class="built_in">front</span>().first;</span><br><span class="line">        curLevel = bfsQ.<span class="built_in">front</span>().second;</span><br><span class="line">        bfsQ.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[s]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">            <span class="type">int</span> t = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (vis1[t])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            vis1[t] = <span class="literal">true</span>;</span><br><span class="line">            bus.trueMinPath[t] = i;    <span class="comment">// 记录下抵达路径点t的边的编号i</span></span><br><span class="line">            <span class="keyword">if</span> (t == end) &#123;</span><br><span class="line">                getOutFlag = <span class="literal">true</span>;</span><br><span class="line">                s = t;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(t, curLevel + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> curNode = end;</span><br><span class="line">    <span class="keyword">while</span> (bus.trueMinPath[curNode] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> edgeId = bus.trueMinPath[curNode];  <span class="comment">// 存储于edge数组中真正的边的Id</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">addEdge</span>(edge[edgeId].from, edge[edgeId].to, minDist[<span class="built_in">make_pair</span>(edge[edgeId].from, edge[edgeId].to)]);</span><br><span class="line">        <span class="built_in">addEdge</span>(edge[edgeId].to, edge[edgeId].from, minDist[<span class="built_in">make_pair</span>(edge[edgeId].to, edge[edgeId].from)]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (edge[edgeId].from &lt; edge[edgeId].to)</span><br><span class="line">            newEdge.<span class="built_in">emplace_back</span>(edge[edgeId].from, edge[edgeId].to);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            newEdge.<span class="built_in">emplace_back</span>(edge[edgeId].to, edge[edgeId].from);</span><br><span class="line">        newEdgePathId.<span class="built_in">emplace_back</span>(cntEdge / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        curNode = edge[bus.trueMinPath[curNode]].from;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BFS1</span>(bus, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BFS2</code>是最原始的加边策略，毫无疑问这样的加边策略会导致加很多没有用上的边，从单个业务的效果上来看成本巨大，于是便有了<code>BFS7</code>。<code>BFS7</code>的加边思想是先不考虑堵塞寻找最少边数路径，然后在这条路径上搜索所有通道，选择堵塞边数最少的通道，对路径上这个通道堵塞的边进行加边，也就是在不考虑堵塞的最少边数路径上加最少的边。所以虽然<code>BFS7</code>加边数少了很多，但其依然不是最少的，因为是先选定了不考虑堵塞的最少边数路径，但是很有可能选择其他路径需要加边的数量会更少。这种加边数最少的策略我也尝试过，但是由于其计算复杂度稍高，且效果并不好（具体原因下面会分析），最终没有应用，此处不做说明。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS7</span><span class="params">(Business&amp; bus)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> start = bus.start, end = bus.end;</span><br><span class="line">    <span class="type">int</span> minBlockEdge = INF;</span><br><span class="line">    <span class="type">int</span> choosenP = <span class="number">-1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tmpOKPath;</span><br><span class="line">    tmpOKPath.<span class="built_in">resize</span>(N, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123; <span class="comment">// 赋初值</span></span><br><span class="line">        vis1[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; bfsQ;</span><br><span class="line">    bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(start, <span class="number">0</span>));</span><br><span class="line">    vis1[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> s = start;</span><br><span class="line">    <span class="type">int</span> curLevel = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> getOutFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!bfsQ.<span class="built_in">empty</span>() &amp;&amp; !getOutFlag) &#123;</span><br><span class="line"></span><br><span class="line">        s = bfsQ.<span class="built_in">front</span>().first;</span><br><span class="line">        curLevel = bfsQ.<span class="built_in">front</span>().second;</span><br><span class="line">        bfsQ.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[s]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> t = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (vis1[t])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            vis1[t] = <span class="literal">true</span>;</span><br><span class="line">            tmpOKPath[t] = i;    <span class="comment">// 记录下抵达路径点t的边的编号i</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (t == end) &#123;</span><br><span class="line">                getOutFlag = <span class="literal">true</span>;</span><br><span class="line">                s = t;</span><br><span class="line">                ++curLevel;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(t, curLevel + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt; P; ++p) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> curNode = end, tmpBlockEdge = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmpOKPath[curNode] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> edgeId = tmpOKPath[curNode];  <span class="comment">// 存储于edge数组中真正的边的Id</span></span><br><span class="line">            <span class="keyword">if</span> (edge[edgeId].Pile[p] != <span class="number">-1</span>)</span><br><span class="line">                ++tmpBlockEdge;</span><br><span class="line">            curNode = edge[edgeId].from;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tmpBlockEdge &lt; minBlockEdge) &#123;   <span class="comment">// 选需要加边数最少的通道</span></span><br><span class="line">            minBlockEdge = tmpBlockEdge;</span><br><span class="line">            bus.pathTmp = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(tmpOKPath.<span class="built_in">begin</span>(), tmpOKPath.<span class="built_in">end</span>());</span><br><span class="line">            choosenP = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> curNode = end;</span><br><span class="line">    bus.pileId = choosenP;</span><br><span class="line">    <span class="keyword">while</span> (bus.pathTmp[curNode] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> edgeId = bus.pathTmp[curNode];  <span class="comment">// 存储于edge数组中真正的边的Id</span></span><br><span class="line">        <span class="type">int</span> lastNode = curNode;</span><br><span class="line">        ++node[curNode].passBusCnt;     <span class="comment">// 经过节点的业务数加1</span></span><br><span class="line">        curNode = edge[bus.pathTmp[curNode]].from;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (edge[edgeId].Pile[choosenP] == <span class="number">-1</span>) &#123;    <span class="comment">// 无需加边</span></span><br><span class="line">            bus.path.<span class="built_in">push_back</span>(edgeId / <span class="number">2</span>); <span class="comment">// edgeId / 2是为了适应题目要求</span></span><br><span class="line">            edge[edgeId].Pile[choosenP] = bus.busId;</span><br><span class="line">            ++edge[edgeId].usedPileCnt;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (edgeId % <span class="number">2</span>) &#123;   <span class="comment">// 奇数-1</span></span><br><span class="line">                edge[edgeId - <span class="number">1</span>].Pile[choosenP] = bus.busId;   <span class="comment">// 双向边，两边一起处理</span></span><br><span class="line">                ++edge[edgeId - <span class="number">1</span>].usedPileCnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;  <span class="comment">// 偶数+1</span></span><br><span class="line">                edge[edgeId + <span class="number">1</span>].Pile[choosenP] = bus.busId;</span><br><span class="line">                ++edge[edgeId + <span class="number">1</span>].usedPileCnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;      <span class="comment">// 需要加边</span></span><br><span class="line">            <span class="built_in">addEdge</span>(edge[edgeId].from, edge[edgeId].to, minDist[<span class="built_in">make_pair</span>(edge[edgeId].from, edge[edgeId].to)]);</span><br><span class="line">            <span class="built_in">addEdge</span>(edge[edgeId].to, edge[edgeId].from, minDist[<span class="built_in">make_pair</span>(edge[edgeId].to, edge[edgeId].from)]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (edge[edgeId].from &lt; edge[edgeId].to)</span><br><span class="line">                newEdge.<span class="built_in">emplace_back</span>(edge[edgeId].from, edge[edgeId].to);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                newEdge.<span class="built_in">emplace_back</span>(edge[edgeId].to, edge[edgeId].from);</span><br><span class="line">            newEdgePathId.<span class="built_in">emplace_back</span>(cntEdge / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            bus.path.<span class="built_in">push_back</span>(cntEdge / <span class="number">2</span> - <span class="number">1</span>); <span class="comment">// edgeId / 2是为了适应题目要求</span></span><br><span class="line">            edge[cntEdge - <span class="number">2</span>].Pile[choosenP] = bus.busId;</span><br><span class="line">            ++edge[cntEdge - <span class="number">2</span>].usedPileCnt;</span><br><span class="line">            edge[cntEdge - <span class="number">1</span>].Pile[choosenP] = bus.busId;   <span class="comment">// 偶数+1</span></span><br><span class="line">            ++edge[cntEdge - <span class="number">1</span>].usedPileCnt;</span><br><span class="line">            bus.pathTmp[lastNode] = cntEdge - <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++node[curNode].passBusCnt;     <span class="comment">// 经过节点的业务数加1</span></span><br><span class="line">    <span class="built_in">reverseArray</span>(bus.path);</span><br><span class="line">    bus.isBusWellAllocate = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>BFS2</code>与<code>BFS7</code>两种加边策略之间，我们最终选择了<code>BFS2</code>。因为虽然<code>BFS7</code>加边数量比<code>BFS2</code>少，但是这只是对一个业务而言，我们的总体目标是让全局成本最低，<code>BFS2</code>虽然对一个业务加的边多了，但是多加的边能在一定程度上缓解网络的堵塞情况，便于后续业务的分配，上文所说到的加边数量最少的算法效果不好也是因为这个原因。再加之<code>BFS2</code>虽然加边数量多了，但后续还有删除冗余边和迭代优化分配的算法对网络进行调整，最终并不会存在太多多余的边。实际测试结果也说明了这个问题，<code>BFS2</code>的全局性能确实是最好的。</p>
<h3 id="删除冗余边"><a href="#删除冗余边" class="headerlink" title="删除冗余边"></a>删除冗余边</h3><p>删除冗余边是降低成本的一个重要部分，其主要思想是统计新增的边上承载的业务数量，若没有承载业务就直接删除；若承载了业务就先保存这条边上的业务的路径，然后对这些业务进行重新分配（这也是后续迭代优化的基本思想），重新分配时不走正在考察这条边，看看能否不使用这条边把原本在这条边上的业务全部分配完成，若可以，则证明这条边为冗余边，可以删除，若不可以，则用保存的原路径复原重新分配寻路时造成的影响。</p>
<p>重新分配采用<code>BFS5</code>，类似于<code>BFS1</code>，区别在于<code>BFS5</code>不会触发加边操作，如果找不到符合要求的路径会直接返回<code>false</code>，标志该业务确实要依赖这条新增的边，即这条边不可以删除。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">BFS5</span><span class="params">(Business&amp; bus, <span class="type">int</span> blockEdge)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> start = bus.start, end = bus.end, p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> findPath = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> minPathDist = INF;</span><br><span class="line">    <span class="type">int</span> choosenP = <span class="number">-1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tmpOKPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; p &lt; P; ++p) &#123;</span><br><span class="line">        tmpOKPath.<span class="built_in">resize</span>(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123; <span class="comment">// 赋初值</span></span><br><span class="line">            vis1[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; bfsQ;</span><br><span class="line">        bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(start, <span class="number">0</span>));</span><br><span class="line">        vis1[start] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> s = start;</span><br><span class="line">        <span class="type">int</span> curLevel = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> getOutFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!bfsQ.<span class="built_in">empty</span>() &amp;&amp; !getOutFlag) &#123;</span><br><span class="line"></span><br><span class="line">            s = bfsQ.<span class="built_in">front</span>().first;</span><br><span class="line">            curLevel = bfsQ.<span class="built_in">front</span>().second;</span><br><span class="line">            bfsQ.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[s]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i / <span class="number">2</span> == blockEdge)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (edge[i].Pile[p] == <span class="number">-1</span>) &#123;        <span class="comment">// pile未被占用时，才试图走该边</span></span><br><span class="line">                    <span class="type">int</span> t = edge[i].to;</span><br><span class="line">                    <span class="keyword">if</span> (vis1[t])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    vis1[t] = <span class="literal">true</span>;</span><br><span class="line">                    tmpOKPath[t] = i;    <span class="comment">// 记录下抵达路径点t的边的编号i</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (t == end) &#123;</span><br><span class="line">                        getOutFlag = <span class="literal">true</span>;</span><br><span class="line">                        s = t;</span><br><span class="line">                        ++curLevel;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        bfsQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(t, curLevel + <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s == end) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找到的路径长度太长，宁愿不要</span></span><br><span class="line">            <span class="keyword">if</span> (!ifLast &amp;&amp; (curLevel &gt; <span class="number">3</span> * minPathSize[<span class="built_in">make_pair</span>(start, end)]))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (minPathSize[<span class="built_in">make_pair</span>(start, end)] == curLevel)</span><br><span class="line">                bus.isBusWellAllocate = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                bus.isBusWellAllocate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> curNode = end, tmpDist = curLevel;</span><br><span class="line">            <span class="keyword">if</span> (tmpDist &lt;= minPathDist) &#123;</span><br><span class="line">                minPathDist = tmpDist;</span><br><span class="line">                bus.pathTmp = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(tmpOKPath.<span class="built_in">begin</span>(), tmpOKPath.<span class="built_in">end</span>());</span><br><span class="line">                choosenP = p;</span><br><span class="line">            &#125;</span><br><span class="line">            findPath = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (findPath == <span class="literal">false</span>) &#123;    <span class="comment">// 找不到路，需要构造新边</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> curNode = end;</span><br><span class="line">    bus.pileId = choosenP;</span><br><span class="line">    <span class="keyword">while</span> (bus.pathTmp[curNode] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> edgeId = bus.pathTmp[curNode];  <span class="comment">// 存储于edge数组中真正的边的Id</span></span><br><span class="line">        ++node[curNode].passBusCnt;     <span class="comment">// 经过节点的业务数加1</span></span><br><span class="line"></span><br><span class="line">        bus.path.<span class="built_in">push_back</span>(edgeId / <span class="number">2</span>); <span class="comment">// edgeId / 2是为了适应题目要求</span></span><br><span class="line">        edge[edgeId].Pile[choosenP] = bus.busId;</span><br><span class="line">        ++edge[edgeId].usedPileCnt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (edgeId % <span class="number">2</span>) &#123;   <span class="comment">// 奇数-1</span></span><br><span class="line">            edge[edgeId - <span class="number">1</span>].Pile[choosenP] = bus.busId;   <span class="comment">// 双向边，两边一起处理</span></span><br><span class="line">            ++edge[edgeId - <span class="number">1</span>].usedPileCnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">// 偶数+1</span></span><br><span class="line">            edge[edgeId + <span class="number">1</span>].Pile[choosenP] = bus.busId;</span><br><span class="line">            ++edge[edgeId + <span class="number">1</span>].usedPileCnt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curNode = edge[bus.pathTmp[curNode]].from;</span><br><span class="line">    &#125;</span><br><span class="line">    ++node[curNode].passBusCnt;     <span class="comment">// 经过节点的业务数加1</span></span><br><span class="line">    <span class="built_in">reverseArray</span>(bus.path);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tryDeleteEdge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = newEdge.<span class="built_in">size</span>(), trueEdgeId;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> idx = <span class="number">0</span>; idx &lt; n; ++idx) &#123;</span><br><span class="line">        <span class="type">int</span> idxEdge = newEdgePathId[idx]; <span class="comment">// idxEdge为边在边集数组的编号（计数时，双向边视作同一边）  </span></span><br><span class="line"></span><br><span class="line">        trueEdgeId = idxEdge * <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> busCnt = <span class="number">0</span>;     <span class="comment">// 记录边上承载的业务数</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; lastBusIds, lastPileIds;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; P; ++j)</span><br><span class="line">            <span class="keyword">if</span> (edge[trueEdgeId].Pile[j] != <span class="number">-1</span> &amp;&amp; edge[trueEdgeId].Pile[j] != T) &#123;   <span class="comment">// 说明在通道j上承载了该业务</span></span><br><span class="line">                ++busCnt;</span><br><span class="line">                lastBusIds.<span class="built_in">push_back</span>(edge[trueEdgeId].Pile[j]);</span><br><span class="line">                lastPileIds.<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (busCnt == <span class="number">0</span>) &#123;      <span class="comment">// 如果该新边上，一条业务都没有承载，直接删边</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> iter = <span class="built_in">find</span>(newEdgePathId.<span class="built_in">begin</span>(), newEdgePathId.<span class="built_in">end</span>(), idxEdge) - newEdgePathId.<span class="built_in">begin</span>();</span><br><span class="line">            newEdge.<span class="built_in">erase</span>(newEdge.<span class="built_in">begin</span>() + iter);</span><br><span class="line">            newEdgePathId.<span class="built_in">erase</span>(newEdgePathId.<span class="built_in">begin</span>() + iter);</span><br><span class="line">            --idx;</span><br><span class="line">            --n;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; P; ++k) &#123;   <span class="comment">// 该边已删除，就应对其进行封锁</span></span><br><span class="line">                edge[trueEdgeId].Pile[k] = T;</span><br><span class="line">                edge[trueEdgeId + <span class="number">1</span>].Pile[k] = T;   <span class="comment">// 偶数+1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">// 如果该新边上，承载了多条业务，则对该边上的所有业务重新分配，看能否不依赖该新边</span></span><br><span class="line"></span><br><span class="line">            vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathTmp</span>(busCnt, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());     <span class="comment">// 用于此后重新加载边</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; busCnt; ++k) &#123;</span><br><span class="line">                pathTmp[k] = buses[lastBusIds[k]].pathTmp;</span><br><span class="line">                <span class="built_in">reCoverNetwork</span>(lastBusIds[k], lastPileIds[k]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">bool</span> findPath = <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> stopK = <span class="number">-1</span>;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; tmpLastPileIds;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; busCnt; ++k) &#123;</span><br><span class="line"></span><br><span class="line">                findPath = <span class="built_in">BFS5</span>(buses[lastBusIds[k]], idxEdge);</span><br><span class="line">                <span class="comment">//findPath = dijkstra5(buses[lastBusIds[k]], idxEdge);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (findPath == <span class="literal">false</span>) &#123;</span><br><span class="line">                    stopK = k;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tmpLastPileIds.<span class="built_in">push_back</span>(buses[lastBusIds[k]].pileId);   <span class="comment">// 原本的pileId已改变，此处进行更新，以防止reCoverNetwork时出bug</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (findPath) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> iter = <span class="built_in">find</span>(newEdgePathId.<span class="built_in">begin</span>(), newEdgePathId.<span class="built_in">end</span>(), idxEdge) - newEdgePathId.<span class="built_in">begin</span>();</span><br><span class="line">                newEdge.<span class="built_in">erase</span>(newEdge.<span class="built_in">begin</span>() + iter);</span><br><span class="line">                newEdgePathId.<span class="built_in">erase</span>(newEdgePathId.<span class="built_in">begin</span>() + iter);</span><br><span class="line">                --idx;</span><br><span class="line">                --n;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; P; ++k) &#123;   <span class="comment">// 该边已删除，就应对其进行封锁</span></span><br><span class="line">                    edge[trueEdgeId].Pile[k] = T;</span><br><span class="line">                    edge[trueEdgeId + <span class="number">1</span>].Pile[k] = T;   <span class="comment">// 偶数+1</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; busCnt; ++k) &#123;</span><br><span class="line"></span><br><span class="line">                    vector&lt;<span class="type">int</span>&gt; nullVector;</span><br><span class="line">                    buses[lastBusIds[k]].mutiplierId.<span class="built_in">swap</span>(nullVector);</span><br><span class="line">                    buses[lastBusIds[k]].curA = D;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">addMultiplier</span>(buses[lastBusIds[k]], lastBusIds[k]);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; stopK; ++k) &#123;   <span class="comment">// 把试图寻路时，造成的对网络的影响消除</span></span><br><span class="line">                    <span class="built_in">reCoverNetwork</span>(lastBusIds[k], tmpLastPileIds[k]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; busCnt; ++k) &#123;  <span class="comment">// 重新加载所有的边</span></span><br><span class="line">                    vector&lt;<span class="type">int</span>&gt; nullVector, nullPath1, nullPath2;</span><br><span class="line">                    buses[lastBusIds[k]].mutiplierId.<span class="built_in">swap</span>(nullVector);</span><br><span class="line">                    buses[lastBusIds[k]].path.<span class="built_in">swap</span>(nullPath1);</span><br><span class="line">                    buses[lastBusIds[k]].pathTmp.<span class="built_in">swap</span>(nullPath2);</span><br><span class="line"></span><br><span class="line">                    buses[lastBusIds[k]].pileId = <span class="number">-1</span>;</span><br><span class="line">                    buses[lastBusIds[k]].curA = D;</span><br><span class="line">                    <span class="built_in">reloadBus</span>(lastBusIds[k], lastPileIds[k], pathTmp[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代优化"><a href="#迭代优化" class="headerlink" title="迭代优化"></a>迭代优化</h3><p>迭代优化是在初赛结束之后才做出来的算法，故无法得知用上迭代优化后在初赛中可以获得怎样的成绩。但是就本地测试来看，它通过在规定的测试时间内进行多次迭代，可以搭配计时完美利用分配完成后剩余的大量时间对网络进行调整优化，可以大幅度降低成本。</p>
<p>迭代优化的过程其实类似于删边，先把需要迭代的业务保存下来，然后进行重新分配，将重新分配的结果与原本的分配结果比较看看有无进步，若有进步则保留，无进步则还原之前的状态。这样持续迭代多次，进步就能累积下去得到更好的结果。</p>
<p>迭代优化的方案有很多，我们做过四个方案，分别是<code>reAllocateBus1</code>~&#96;reAllocateBus4<code>，四个方案的区别主要在于评判重新分配的结果的标准或过程中的约束。四个方案都是先随机出一个</code>gap<code>，然后从业务中一次随机抽取</code>gap&#96;个业务作为一个单位去考察重新分配后有无更好，这个抽取过程在一次迭代中会重复多次，具体视总体业务量来确定，抽取次数过多会影响效率进而减少迭代次数使效果变差。</p>
<p><code>reAllocateBus1</code>对重新分配结果的评判标准为总的边数是否减少，若总边数减少则认为成功，采用重新分配的结果。其在进行重新分配寻路的时候允许进行加边操作，以求获得较好的路径。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reAllocateBus1</span><span class="params">(<span class="type">int</span> HLim)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> gap = <span class="built_in">max</span>(<span class="built_in">int</span>(<span class="number">0.025</span> * T), <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (gap &gt; T)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">busIdx</span><span class="params">(gap, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + gap &lt; HLim; i = i + gap) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">srand</span>(<span class="number">42</span>);  <span class="comment">// 设置随机数种子  </span></span><br><span class="line">        <span class="built_in">random_shuffle</span>(totBusIdx.<span class="built_in">begin</span>(), totBusIdx.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            busIdx[i] = totBusIdx[i];</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> oriEdgeNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathTmp1</span>(gap, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());     <span class="comment">// 用于此后重新加载边</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pileTmp1</span><span class="params">(gap, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i, busId; j &lt; i + gap; ++j) &#123;</span><br><span class="line">            busId = busIdx[j - i];</span><br><span class="line">            oriEdgeNum += buses[busId].path.<span class="built_in">size</span>();</span><br><span class="line">            pathTmp1[j - i] = buses[busId].pathTmp;</span><br><span class="line">            pileTmp1[j - i] = buses[busId].pileId;</span><br><span class="line">            <span class="built_in">reCoverNetwork</span>(busId, buses[busId].pileId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> curEdgeNum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> findPath = <span class="literal">false</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pileTmp2</span><span class="params">(gap, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + gap - <span class="number">1</span>, busId; j &gt;= i; --j) &#123;</span><br><span class="line">            busId = busIdx[j - i];</span><br><span class="line">            <span class="built_in">loadBus</span>(busId, <span class="literal">false</span>);</span><br><span class="line">            pileTmp2[j - i] = buses[busId].pileId;</span><br><span class="line">            curEdgeNum += buses[busId].path.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1.05</span> * curEdgeNum &lt; oriEdgeNum) &#123;  <span class="comment">// 总体的边数减少，接受迁移</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">// 否则，回复原状态</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + gap - <span class="number">1</span>, busId; j &gt;= i; --j) &#123;   <span class="comment">// 把试图寻路时，造成的对网络的影响消除</span></span><br><span class="line">                busId = busIdx[j - i];</span><br><span class="line">                <span class="built_in">reCoverNetwork</span>(busId, pileTmp2[j - i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i, busId; j &lt; i + gap; ++j) &#123;  <span class="comment">// 重新加载所有的边</span></span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; nullVector, nullPath1, nullPath2;</span><br><span class="line">                busId = busIdx[j - i];</span><br><span class="line">                buses[busId].mutiplierId.<span class="built_in">swap</span>(nullVector);</span><br><span class="line">                buses[busId].path.<span class="built_in">swap</span>(nullPath1);</span><br><span class="line">                buses[busId].pathTmp.<span class="built_in">swap</span>(nullPath2);</span><br><span class="line"></span><br><span class="line">                buses[busId].pileId = <span class="number">-1</span>;</span><br><span class="line">                buses[busId].curA = D;</span><br><span class="line">                <span class="built_in">reloadBus</span>(busId, pileTmp1[j - i], pathTmp1[j - i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>reAllocateBus2</code>对重新分配结果的评判标准也是总路径边数是否减少，与<code>reAllocateBus1</code>的区别在于在重新分配寻路的过程中不允许加边操作，避免迭代过程继续加边，试图减小加边数。但经过实测效果并不好，依然存在全局性能不好的问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reAllocateBus2</span><span class="params">(<span class="type">int</span> HLim)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> gap = <span class="built_in">max</span>(<span class="built_in">int</span>(<span class="number">0.05</span> * T), <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (gap &gt; T)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">totBusIdx</span><span class="params">(T, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">busIdx</span><span class="params">(gap, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; ++i)</span><br><span class="line">        totBusIdx[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + gap &lt; HLim; i = i + gap) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));  <span class="comment">// 设置随机数种子  </span></span><br><span class="line">        <span class="built_in">random_shuffle</span>(totBusIdx.<span class="built_in">begin</span>(), totBusIdx.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; gap; ++k) &#123;</span><br><span class="line">            busIdx[k] = totBusIdx[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> oriEdgeNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathTmp1</span>(gap, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());     <span class="comment">// 用于此后重新加载边</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pileTmp1</span><span class="params">(gap, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i, busId; j &lt; i + gap; ++j) &#123;</span><br><span class="line">            busId = busIdx[j - i];</span><br><span class="line">            oriEdgeNum += buses[busId].path.<span class="built_in">size</span>();</span><br><span class="line">            pathTmp1[j - i] = buses[busId].pathTmp;</span><br><span class="line">            pileTmp1[j - i] = buses[busId].pileId;</span><br><span class="line">            <span class="built_in">reCoverNetwork</span>(busId, buses[busId].pileId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> curEdgeNum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> findPath = <span class="literal">false</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathTmp2</span>(gap, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());     <span class="comment">// 用于此后重新加载边</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pileTmp2</span><span class="params">(gap, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + gap - <span class="number">1</span>, busId; j &gt;= i; --j) &#123;</span><br><span class="line"></span><br><span class="line">            busId = busIdx[j - i];</span><br><span class="line">            findPath = <span class="built_in">BFS5</span>(buses[busId], <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span> (findPath) &#123;</span><br><span class="line">                pathTmp2[j - i] = buses[busId].pathTmp;</span><br><span class="line">                pileTmp2[j - i] = buses[busId].pileId;</span><br><span class="line">                curEdgeNum += buses[busId].path.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> curNode = buses[busId].start, trueNextEdgeId;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; buses[busId].path.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (edge[buses[busId].path[i] * <span class="number">2</span>].from == curNode)</span><br><span class="line">                        trueNextEdgeId = buses[busId].path[i] * <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        trueNextEdgeId = buses[busId].path[i] * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">                    curNode = edge[trueNextEdgeId].to;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (buses[busId].curA &gt;= edge[trueNextEdgeId].trueD) &#123;</span><br><span class="line">                        buses[busId].curA -= edge[trueNextEdgeId].trueD;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        node[edge[trueNextEdgeId].from].Multiplier[buses[busId].pileId] = buses[busId].pileId;</span><br><span class="line">                        buses[busId].curA = D;</span><br><span class="line">                        buses[busId].curA -= edge[trueNextEdgeId].trueD;</span><br><span class="line">                        buses[busId].mutiplierId.<span class="built_in">push_back</span>(edge[trueNextEdgeId].from);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;  <span class="comment">// BFS5找不到路时，不会对网络和业务产生任何影响</span></span><br><span class="line">                findPath = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (findPath &amp;&amp; <span class="number">1.025</span> * curEdgeNum &lt; oriEdgeNum) &#123;  <span class="comment">// 总体的边数减少，接受迁移</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">// 否则，回复原状态</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + gap - <span class="number">1</span>, busId; j &gt;= i; --j) &#123;   <span class="comment">// 把试图寻路时，造成的对网络的影响消除     </span></span><br><span class="line">                <span class="keyword">if</span> (pathTmp2[j - i].<span class="built_in">size</span>() == <span class="number">0</span>)        <span class="comment">// 该业务寻路失败，对网络不造成影响</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                busId = busIdx[j - i];</span><br><span class="line">                <span class="built_in">reCoverNetwork</span>(busId, pileTmp2[j - i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i, busId; j &lt; i + gap; ++j) &#123;  <span class="comment">// 重新加载所有的边</span></span><br><span class="line"></span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; nullVector, nullPath1, nullPath2;</span><br><span class="line">                busId = busIdx[j - i];</span><br><span class="line">                buses[busId].mutiplierId.<span class="built_in">swap</span>(nullVector);</span><br><span class="line">                buses[busId].path.<span class="built_in">swap</span>(nullPath1);</span><br><span class="line">                buses[busId].pathTmp.<span class="built_in">swap</span>(nullPath2);</span><br><span class="line"></span><br><span class="line">                buses[busId].pileId = <span class="number">-1</span>;</span><br><span class="line">                buses[busId].curA = D;</span><br><span class="line">                <span class="built_in">reloadBus</span>(busId, pileTmp1[j - i], pathTmp1[j - i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>reAllocateBus3</code>对重新分配结果的评判标准也是总路径边数是否减少，但是在挑选迭代业务时有所不同。它先考察每一个业务所经过的路径长度是否小于<code>最短路径长度*goofBadGap</code>，以此分离出“分配良好”和“分配不良好”的业务。然后它以某一概率抽取“不良好”的业务，剩余则从“良好”中抽取，以此尽可能试图抽出较多“不良好”的业务进行重新分配。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reAllocateBus3</span><span class="params">(<span class="type">int</span> HLim)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> gap = <span class="built_in">max</span>(<span class="built_in">int</span>(<span class="number">0.025</span> * T), <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (gap &gt; T)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> ratio = <span class="number">0.5</span>;     <span class="comment">// 以ratio的概率，选择不良好的业务进行分配</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; goodBusId;  <span class="comment">// 良好分配的业务，“良好”的定义是该业务所经过的路径长度小于最短路径长度*goofBadGap</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; badBusId;   <span class="comment">// 不良好分配的业务</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; ++i)</span><br><span class="line">        <span class="keyword">if</span> (buses[i].isBusWellAllocate)</span><br><span class="line">            goodBusId.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            badBusId.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">busIdx</span><span class="params">(gap, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + gap &lt; HLim; i = i + gap) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>) + <span class="built_in">rand</span>() % <span class="number">1000</span>);  <span class="comment">// 设置随机数种子  </span></span><br><span class="line">        <span class="built_in">random_shuffle</span>(goodBusId.<span class="built_in">begin</span>(), goodBusId.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">random_shuffle</span>(badBusId.<span class="built_in">begin</span>(), badBusId.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> goodBusSize = goodBusId.<span class="built_in">size</span>(), badBusSize = badBusId.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, m = <span class="number">0</span>, n = <span class="number">0</span>; j &lt; gap; ++j) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (n &gt;= goodBusSize) &#123;</span><br><span class="line">                busIdx[j] = badBusId[m++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m &gt;= badBusSize) &#123;</span><br><span class="line">                busIdx[j] = goodBusId[n++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">double</span> curRatio = (<span class="type">double</span>)(<span class="built_in">rand</span>()) / RAND_MAX;</span><br><span class="line">            <span class="keyword">if</span> (curRatio &lt; ratio)   <span class="comment">// 以ratio的概率，选择不良好的业务进行分配</span></span><br><span class="line">                busIdx[j] = badBusId[m++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                busIdx[j] = goodBusId[n++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> oriEdgeNum = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathTmp1</span>(gap, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());     <span class="comment">// 用于此后重新加载边</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pileTmp1</span><span class="params">(gap, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i, busId; j &lt; i + gap; ++j) &#123;</span><br><span class="line">            busId = busIdx[j - i];</span><br><span class="line">            oriEdgeNum += buses[busId].path.<span class="built_in">size</span>();</span><br><span class="line">            pathTmp1[j - i] = buses[busId].pathTmp;</span><br><span class="line">            pileTmp1[j - i] = buses[busId].pileId;</span><br><span class="line">            <span class="built_in">reCoverNetwork</span>(busId, buses[busId].pileId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> oriCntEdge = cntEdge;</span><br><span class="line">        <span class="type">int</span> curEdgeNum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> findPath = <span class="literal">false</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pileTmp2</span><span class="params">(gap, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + gap - <span class="number">1</span>, busId; j &gt;= i; --j) &#123;</span><br><span class="line">            busId = busIdx[j - i];</span><br><span class="line">            <span class="built_in">loadBus</span>(busId, <span class="literal">false</span>);</span><br><span class="line">            pileTmp2[j - i] = buses[busId].pileId;</span><br><span class="line">            curEdgeNum += buses[busId].path.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1.05</span> * curEdgeNum &lt; oriEdgeNum) &#123;  <span class="comment">// 总体的边数减少，接受迁移</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">// 否则，回复原状态</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + gap - <span class="number">1</span>, busId; j &gt;= i; --j) &#123;   <span class="comment">// 把试图寻路时，造成的对网络的影响消除</span></span><br><span class="line">                busId = busIdx[j - i];</span><br><span class="line">                <span class="built_in">reCoverNetwork</span>(busId, pileTmp2[j - i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i, busId; j &lt; i + gap; ++j) &#123;  <span class="comment">// 重新加载所有的边</span></span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; nullVector, nullPath1, nullPath2;</span><br><span class="line">                busId = busIdx[j - i];</span><br><span class="line">                buses[busId].mutiplierId.<span class="built_in">swap</span>(nullVector);</span><br><span class="line">                buses[busId].path.<span class="built_in">swap</span>(nullPath1);</span><br><span class="line">                buses[busId].pathTmp.<span class="built_in">swap</span>(nullPath2);</span><br><span class="line"></span><br><span class="line">                buses[busId].pileId = <span class="number">-1</span>;</span><br><span class="line">                buses[busId].curA = D;</span><br><span class="line">                <span class="built_in">reloadBus</span>(busId, pileTmp1[j - i], pathTmp1[j - i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在这里利用cntEdge的变化来及时删除无用新边</span></span><br><span class="line">            <span class="comment">//for (int j = oriCntEdge; j &lt; cntEdge; j = j + 2) &#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//    int iter = find(newEdgePathId.begin(), newEdgePathId.end(), j / 2) - newEdgePathId.begin();</span></span><br><span class="line">            <span class="comment">//    newEdge.erase(newEdge.begin() + iter);</span></span><br><span class="line">            <span class="comment">//    newEdgePathId.erase(newEdgePathId.begin() + iter);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//    for (int k = 0; k &lt; P; ++k) &#123;   // 该边已删除，就应对其进行封锁</span></span><br><span class="line">            <span class="comment">//        edge[j].Pile[k] = T;</span></span><br><span class="line">            <span class="comment">//        edge[j + 1].Pile[k] = T;   // 偶数+1</span></span><br><span class="line">            <span class="comment">//    &#125;</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>reAllocateBus4</code>将重新分配结果的评判统计量从边的数量改为边的利用率，比单纯关注边数更有全局意义，实测效果也更好，收敛速度更快。但是其中有一个疑惑的地方，理论上来说边的利用率应越大越好，但实际上把接受重新分配结果的标准定为<code>重新分配后的边的利用率&lt;重新分配前的边的利用率</code>可以使成本大幅下降（但不能保证每次迭代成本递减），这个完全相反的逻辑是目前仍未想明白的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reAllocateBus4</span><span class="params">(<span class="type">int</span> HLim)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> gap = <span class="built_in">max</span>(<span class="built_in">int</span>(<span class="number">0.025</span> * T), <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (gap &gt; T)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">busIdx</span><span class="params">(gap, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + gap &lt; HLim; i = i + gap) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">srand</span>(<span class="number">42</span>);  <span class="comment">// 设置随机数种子  </span></span><br><span class="line">        <span class="built_in">random_shuffle</span>(totBusIdx.<span class="built_in">begin</span>(), totBusIdx.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; gap; ++i) &#123;</span><br><span class="line">            busIdx[i] = totBusIdx[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> oriEdgeNum = <span class="number">0</span>, oriFullEdge = <span class="number">0</span>;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; mark1;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; mark2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + gap; ++j) &#123;</span><br><span class="line">            oriEdgeNum += <span class="built_in">countEdgeNum</span>(buses[busIdx[j - i]].path, mark1);</span><br><span class="line">            oriFullEdge += <span class="built_in">testEdgeFull</span>(buses[busIdx[j - i]].path, mark2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathTmp1</span>(gap, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());     <span class="comment">// 用于此后重新加载边</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pileTmp1</span><span class="params">(gap, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i, busId; j &lt; i + gap; ++j) &#123;</span><br><span class="line">            busId = busIdx[j - i];</span><br><span class="line">            pathTmp1[j - i] = buses[busId].pathTmp;</span><br><span class="line">            pileTmp1[j - i] = buses[busId].pileId;</span><br><span class="line">            <span class="built_in">reCoverNetwork</span>(busId, buses[busId].pileId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> curEdgeNum = <span class="number">0</span>, curFullEdge = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> findPath = <span class="literal">false</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pileTmp2</span><span class="params">(gap, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + gap - <span class="number">1</span>, busId; j &gt;= i; --j) &#123;</span><br><span class="line">            busId = busIdx[j - i];</span><br><span class="line">            <span class="built_in">loadBus</span>(busId, <span class="literal">false</span>);</span><br><span class="line">            pileTmp2[j - i] = buses[busId].pileId;</span><br><span class="line">            curEdgeNum += buses[busId].path.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; mark3;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; mark4;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + gap; ++j) &#123;</span><br><span class="line">            curEdgeNum += <span class="built_in">countEdgeNum</span>(buses[busIdx[j - i]].path, mark3);</span><br><span class="line">            curFullEdge += <span class="built_in">testEdgeFull</span>(buses[busIdx[j - i]].path, mark4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curFullEdge * oriEdgeNum &lt; oriFullEdge * curEdgeNum) &#123;  <span class="comment">// 边的利用效率下降，接受迁移</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">// 否则，回复原状态</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + gap - <span class="number">1</span>, busId; j &gt;= i; --j) &#123;   <span class="comment">// 把试图寻路时，造成的对网络的影响消除</span></span><br><span class="line">                busId = busIdx[j - i];</span><br><span class="line">                <span class="built_in">reCoverNetwork</span>(busId, pileTmp2[j - i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i, busId; j &lt; i + gap; ++j) &#123;  <span class="comment">// 重新加载所有的边</span></span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; nullVector, nullPath1, nullPath2;</span><br><span class="line">                busId = busIdx[j - i];</span><br><span class="line">                buses[busId].mutiplierId.<span class="built_in">swap</span>(nullVector);</span><br><span class="line">                buses[busId].path.<span class="built_in">swap</span>(nullPath1);</span><br><span class="line">                buses[busId].pathTmp.<span class="built_in">swap</span>(nullPath2);</span><br><span class="line"></span><br><span class="line">                buses[busId].pileId = <span class="number">-1</span>;</span><br><span class="line">                buses[busId].curA = D;</span><br><span class="line">                <span class="built_in">reloadBus</span>(busId, pileTmp1[j - i], pathTmp1[j - i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过实际测试，我们最终选定了使用<code>reAllocateBus4</code>，因为它拥有最好的全局性能与较快的收敛速度。迭代优化需要与删边协作使用，才能在迭代优化调整之后删除冗余边。由于<code>reAllocateBus4</code>不能确保每次迭代成本递减（但是一般都能减小到一个较低的成本后再发生小幅波动），所以后来增加了保存迭代过程中成本最低网络的功能，并且最后输出这个成本最低的网络。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他一些比较简单的算法（如添加放大器等）和上述主要算法的一些辅助函数在此不做说明，还有许多测试性的小优化方案如业务分配排序（根据起点终点分组或最短路径长度）由于应用场景有限未加入到主要代码中。</p>
<h2 id="初赛判题器"><a href="#初赛判题器" class="headerlink" title="初赛判题器"></a>初赛判题器</h2><p>由于迭代优化算法是在初赛结束之后才开始做的，线上判题入口已经关闭，便自己写了一个简单的判题器用于判断输出的结果是否合法、评判分数和计时，在这个过程中学到了一些有意思的东西。</p>
<h3 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h3><p>在使用命令行启动可执行文件时，<code>main()</code>是可以传参的，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>argc</code>为参数个数，要注意可执行文件名本身就算一个参数。</li>
<li><code>argv</code>是参数列表，是一个字符串数组指针，可以从中读出每一个参数。</li>
</ul>
<blockquote>
<p>如在命令行运行时输入：<code>Judger.exe main.exe</code>，则<code>argc</code>为<code>2</code>，<code>argv</code>所指数组为<code>[&quot;Judger.exe&quot;, &quot;main.exe&quot;]</code>。</p>
</blockquote>
<h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><p>这个判题器采用管道实现与解题程序的通信。由于管道是单工通信，故需要建立两条管道才能实现双工通信，但是由于比较繁琐最终放弃了双向通信，判题器只接收解题程序输出的结果，而输入则由用户输入。程序之间单向通信的管道的建立十分简单。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读</span></span><br><span class="line">FILE* pipe = _popen(programName, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">// 写</span></span><br><span class="line">FILE* pipe = _popen(programName, <span class="string">&quot;w&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>通过这一行代码即可同时做到在命令窗口内拉起目标程序已经建立对应的读或写的管道。目标程序被拉起后会在同一个命令窗口中与主程序同时运行，若此时管道为读，目标程序的标准输入流就依然是命令窗口输入，标准输出则接到了管道上，可由主程序使用<code>fscanf()</code>读取；若此时管道为写，目标程序的标准输入流接到管道上，可由主程序使用<code>fprintf()</code>写入，而标准输出依然是命令窗口输出。</p>
<h2 id="复赛策略"><a href="#复赛策略" class="headerlink" title="复赛策略"></a>复赛策略</h2><p>复赛主要是增加了一个业务需要找出多条路径的需求，并且对这多条路径有一定约束。理论上来说只需在代码中增加寻找多条路径的处理方法，并且按约束条件在寻找多条路径时对已经选择过的边进行封锁即可简单解决，但是比赛的时候这么做却一直在超时。赛后在本地自造数据集后调试的时候发现，当前的策略存在某种问题，直接这样修改会导致加边数量巨大，使得网络复杂度快速上升，寻路算法的性能快速下降，从而导致超时。</p>
<p>从赛后复盘看来，应该优先给需要分配两条路径的业务（有约束）分配路径，并且采用新的加边策略，寻路算法使用双向BFS来提高在复杂网络下寻路的效率，才能较好的解决这个问题。</p>
<h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>初赛期间未使用迭代优化算法获得粤港澳上合赛区第三名，若加上迭代优化算法有望登顶。复赛由于在比赛的4个小时中未能解决超时问题未能出分，十分遗憾！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>团队比赛的优势在于可以集思广益，能有志同道合的人一起讨论问题、一起解决问题是十分幸福的一件事情，非常感谢强大的队友不断有新的想法去尝试。</p>
<p>虽然复赛没有出理想的成绩，但是借此机会来到了华为的欧洲小镇，坐着小火车感受了这一带的风景与氛围，在夕阳之下躺在广阔的草地上打滚，和华为工程师一起共进晚宴，探讨行业前沿信息……参赛体验十分不错，非常感谢华为光产品线提供的这次机会，明年再做追光者！</p>
<blockquote>
<p>完整代码链接：<a href="https://github.com/WJD1005/HUAWEI-ControlRush2023">https://github.com/WJD1005/HUAWEI-ControlRush2023</a></p>
</blockquote>
]]></content>
      <categories>
        <category>比赛复盘</category>
      </categories>
      <tags>
        <tag>华为</tag>
        <tag>比赛</tag>
        <tag>嵌入式</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>猫耳朵</title>
    <url>/posts/76c00983/</url>
    <content><![CDATA[<blockquote>
<p>本文写作风格学习自<a href="https://space.bilibili.com/2304371/"><strong>水滴酱</strong></a>，封面由AI生成。</p>
</blockquote>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>太阳完全下沉到了城市的另一边，污血色的晚霞像是天空红肿的伤口，慢慢化作紫绀色，像是黄昏的尸斑。</p>
<p>“你到底去哪了？”我像具行尸走肉一样游荡在大街上，身旁的路人像看到怪物一般，瞳孔里充满惊恐，拉开与我的距离快速走过。</p>
<p>嘀嘀嘀，我的手机响了起来。</p>
<p>我颤抖着从口袋里摸出手机，打开手机——那是我用她照片做的锁屏壁纸。手机里的她红着脸，静静地看着我。她那蓝黑色的瞳孔，深邃得像要把一切吸进去。</p>
<p>再也忍不住了，我看也没看就按下了电源键，终于让这刺耳无比的闹钟声停了下来。</p>
<p>头顶两旁的霓虹灯病变般地分裂，在黑夜中蔓延，这将死般的灯光却丝毫不能照亮我的身躯。</p>
<p>“你到底去哪了……”我像个疯子一般重复着这句话。</p>
<p>下雨了。</p>
<p>我停止了发出声音，热闹的街道仿佛顷刻消失，随后而来的是一片寂静，只听得见那仿佛永不停息的污浊雨水在四周轰鸣。</p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>第一次遇见她的时候，也是在这条下雨的街道上。</p>
<p>“为什么又要离开我……”</p>
<p>已经不知道是第几次经历分手的痛苦了，我算是彻底死心了，在路边的夜宵摊上喝得大醉。</p>
<p>踉跄地走到街上，一滴滴冰冷的触感打在我身上。没带伞，就这么回去吧。	啪嗒，我一脚踩到一个水坑上，本来积水上反射着的暗淡的霓虹灯的光芒被我打散，扭曲，旋转，积水里的世界就这样碎裂，暧昧摇曳，迷幻绝望。</p>
<p>从口袋里摸出一盒烟，打开盒盖挑了一支叼在嘴上。雨里点烟有点困难，但还是点着了。为了不让它被这不懂事的雨淋湿，我深深地吸了一口，眼前那点橙红色的微弱荧光猛地变亮，随后又慢慢暗淡下去，正如小时候和父母一起在河岸边看的烟花一样。</p>
<p>十几年前在我很小的时候，我的父母因故去世，后来被人收养长大。如今我一个人远离家乡在外打工，陪伴我的只有老板的辱骂、房东的催租、朋友的嘲讽，如今又被女朋友抛弃。我真的一无所有。</p>
<p>“……果然我还是没用啊。”</p>
<p>好像喝得有点太多了，我的胃里翻江倒海，糜烂腐臭的内容物伴随着浓稠的黄绿色液体从我的食道涌出，烟也掉到了地上，失去最后那一点微光。</p>
<p>我难受得捂着自己的胸膛。</p>
<p>咚，咚，咚……</p>
<p>这或许是我活在这个世界上的唯一证明吧。</p>
<p>吐了许久，我抬起头准备继续走回家。</p>
<p>嗯？</p>
<p>在惨白的LED灯光下，一个头戴黑色猫耳装饰，飘着一头水蓝色头发，身穿黑色外套，下摆露出一小截短裙的少女正看向我的方向，身后好像还有一条垂至小腿的黑色尾巴在随风摇摆。她表情看上去很茫然，蓝黑色瞳孔中反射着昏黄的路灯。雨滴滴落在她娇嫩的脸上，像是一滴滴泪珠，发丝也被黏在了脸上。</p>
<p>当我回过神来时，我已经走到了少女面前。</p>
<p>似乎是感受到了我的视线，她望向我的眼睛。</p>
<p>“可以带我回家吗？”</p>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>吱呀。</p>
<p>我关上了出租屋的房门。</p>
<p>房间内一览无余，仅有必用的几件家具。</p>
<p>少女就这样怔怔地站在这小小房间的正中心。灯泡的灯光从她的头顶洒落，宛同圣女。</p>
<p>圣洁。</p>
<p>与初遇时不同，此时她蓝宝石般的眼睛充满光泽，清澈无比。</p>
<p>少女的体香就像腐烂的水果，这股甜腻的香味逐渐氤氲在这小小的空间中，越发令人沉迷其中无法自拔。</p>
<p>我和她的距离不到30厘米。我开始后悔了，借着这酒劲我干了什么事啊，拐骗少女回家可是犯法的啊。</p>
<p>少女突然抬起头，凝视着我的眼睛。她的眼睛中映出了我这张憔悴又丑陋的脸。我实在是受不了这目光，躲开了她的视线，眼睛看向了她的头顶。</p>
<p>这猫耳头饰做得真精致啊，就跟真的一样……嗯？这也太真了吧？！</p>
<p>被眼前这一幕吓到的我往后退了两步，脚踩到了扔在地上的玻璃啤酒瓶，脚直接向前做了个加速运动，而上半身被牛顿留在了原地。</p>
<p>我摔倒了在她面前。</p>
<p>头砸在了墙上，摔得好痛。</p>
<p>我惊恐地看着她，但后脑勺却传来一阵睡意，我的眼睛不受控制地合上，在视野剩下一条线时，我看到了她的嘴角微微上翘，但又渐渐变成淡淡的哀伤。</p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>后脑勺传来一阵痛感，但仿佛枕在柔软的云朵之上，那是我未曾感受过的舒适。</p>
<p>我强硬地与刺眼的灯光作斗争，缓缓地睁开眼睛。</p>
<p>那是一片蓝色，天空？</p>
<p>在短暂的失明后，那个少女出现在我的眼前，她长长的蓝色发尾刚好垂到我的脸颊上，弄出阵阵痒意。少女的香味让我更加迷失其中。</p>
<p>这角度，就是膝枕吧……没想到我这个废物的一生也有这样美好的瞬间啊……</p>
<p>突然，我的脑海中浮现出晕倒之前看到的画面——两个无比真实的猫耳朵长在这个少女头上。我的眼睛再次充满惊恐，而她的眼睛始终凝视着我，我甚至能在她眼睛中看到我现在这狼狈样。不知道是被吓到还是对现在这种美妙感受的迷恋，我的身体一点动作都没有。她嘴角再次勾出那一抹轻轻的笑意，猛地弯下腰，她的脸猛地贴近，近到能感受到彼此的呼吸。</p>
<p>“我确实是只猫哦~”</p>
<p>“喵~”</p>
<p>窗外的雨还在下着，狂躁的风裹挟着摇曳的雨幕，拍打着缺了一角的窗玻璃，感觉随时都要碎裂。窗外天旋地转，整座城市仿佛都在扭曲，旋转，扭曲，旋转……</p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>猫娘——</p>
<p>不怎么混二次元的我的脑中冒出了这个词。</p>
<p>传说中化作人形的猫？可是这东西真的现实存在吗？</p>
<p>管他呢，有这样的美少女陪着你还不知足？</p>
<p>……</p>
<p>脑内逐渐变得浓稠起来，又突然被稀释。</p>
<p>……</p>
<p>我艰难地动了动眼皮，尝试睁开了眼睛。原来我睡在了床上啊。</p>
<p>下一刻，我突然意识到了我胸上的被子仿佛重了千斤，但是十分柔软，并且异常温暖……</p>
<p>是那个少女。</p>
<p>她就静静地趴在我身上。</p>
<p>温柔而缓慢的呼吸。</p>
<p>微弱而规律的心跳。</p>
<p>我贪恋着这份从来没有感受过的温暖，似乎要把我融化在其中。我腾出两只手轻轻把她抱在怀中，似乎接受了她的存在。</p>
<p>她头顶上两只毛茸茸的耳朵突然颤了一颤。</p>
<p>“你在哭吗？”少女突然开口，这慵懒的声线却异常可爱，我不禁起了一身鸡皮疙瘩。</p>
<p>“没……没哭啊。”刚说出这句话，我就感觉到，我的枕头似乎是湿的。</p>
<p>嗯？好像我的衣服也是湿的。</p>
<p>“哭的是你吧？”我轻声问道。</p>
<p>两只猫耳朵又颤了一颤，随后轻轻起身，两只手支撑在床上，她那可爱娇嫩的脸就这么悬在我的脸上方。</p>
<p>好近。</p>
<p>少女脸两旁天蓝色的头发就这样顺着我的脸两旁下垂，仿佛给我们两个脸庞之间降下了一道帷幕，形成了一个只有我们两个人的私密空间。</p>
<p>她蓝色的眼睛中映出我的脸，随后突然变得暗淡无光，同万丈深渊一般，似乎要把面前的我和这小小的空间吸入。</p>
<p>少女什么都没说，便又重新趴在我的胸膛上。</p>
<p>“你想知道我为什么哭吗？”</p>
<p>“嗯。”</p>
<p>“很久以前，我的主人非常疼爱我，会给我做好吃的，会和我玩，会和我去看烟花……”</p>
<p>……</p>
<p>“可是后来，他们性情大变，我却成为了他们迁怒的对象，发泄的工具……”</p>
<p>……</p>
<p>说了很久以后，她开始啜泣起来。两只猫耳朵一抖一抖，那娇怜的样子，让我心疼。</p>
<p>“……那你没有反抗过吗？”我从嘴里艰难地挤出了一句话，但下一刻就觉得这个问题问得很傻瓜。</p>
<p>“不会的哦。像我们这种物种，都知道自己相对锦衣玉食的生活是靠着绝世的容颜和温顺的性情从主人那换来的。如果反抗的话……或许连在社会上最后的保护都没有了呢……”</p>
<p>“但是他们越来越变本加厉，把我扔到外面，就这样抛弃我了。或许我们本该就是这样被用完即弃的吧……”</p>
<p>用完即弃……</p>
<p>后面的故事就是在那下雨的街道上遇上了我并且被我带回家。</p>
<p>“你就不怕我也是这样的人吗？”我又不小心问了一个直男问题。</p>
<p>少女沉默了一会。</p>
<p>“不会的哦~”</p>
<p>“我在你的眼睛里看到了和他们不一样的东西~”</p>
<p>说实话，那只是我失恋后绝望痛苦的眼神罢了。</p>
<p>“我本不想再找一个新家了，可是我……看到了你，你的眼睛里满是痛苦与悲伤，而且凝视我时，有一种……压抑不住的同情与怜爱。”</p>
<p>“你又为什么哭呢？”</p>
<p>少女用双手把自己的身体撑起来从我身上离开，然后顺势倒在我的身侧，像恋人一样，把我抱入她那温暖的怀中。</p>
<p>“我……”</p>
<h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>“……就是这样罢了。”</p>
<p>少女一直把我环抱在她的怀中，任由太阳升得越来越高，阳光洒落在我们两人身上。</p>
<p>我试图压抑着自己的情绪，可眼泪还是不争气的往外流。</p>
<p>太羞耻了啊，我居然在一个女孩子的怀里哭。</p>
<p>少女轻轻笑着，抽出手帮我擦去眼角剩余的眼泪，又将我紧紧抱在怀中。</p>
<p>“你已经很优秀了哦~”</p>
<p>从她柔软身体上传来的温暖，让我从来没有感受过如此的安心。</p>
<p>“让我们开始新的生活吧喵~”</p>
<p>两只猫耳朵直直地竖了起来。</p>
<h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>我用我那蹩脚的厨艺，在被油烟熏得焦黄的厨房里，做了两份“人体生命体征保持餐”。没错，仅仅只是能吃而已，味道什么的就不要管啦。</p>
<p>少女正乖巧地坐在餐桌旁的椅子上，黑色的尾巴高高竖起。</p>
<p>我把两份饭端了出来，推一份到她面前，然后坐在了她对面。</p>
<p>她低下头闻了一闻，然后尝试性地吃了一口。</p>
<p>“喵！好难吃！”</p>
<p>这一瞬间我有点无地自容，没想到吐槽会来得这么快而且这么直白。</p>
<p>大概是看到我微妙的表情，少女又低下头去继续吃了。嘴上说着嫌弃，身体还是很诚实的嘛！</p>
<p>等我们两个都吃完以后，她直勾勾地盯着我的眼睛。</p>
<p>“以后还是我来做饭吧喵。”</p>
<p>欸？还有这等好事？我立马就答应了，作为交换我答应了她每天晚上要陪她玩。</p>
<p>她真的好可爱。</p>
<p>看着她，我突然想到了一件事。</p>
<p>我慢慢靠近了她。</p>
<p>我伸出了我的手，慢慢靠近她的侧脸。</p>
<p>她的脸微微泛红，眼睛躲开了我的视线。</p>
<p>我轻轻地触碰到了她那嫩滑的侧脸，温柔地抚摸着她的脸颊，然后轻轻撩起了她侧脸的那一撮蓝发……</p>
<p>“真的有四只耳朵！！”</p>
<p>我没忍住惊呼出来，猫娘到底有四只耳朵还是两只耳朵的事情之前已经困扰我很久了。</p>
<p>少女白了我一眼，红红的脸颊看着似乎有点生气。</p>
<p>“信不信我挠你！”</p>
<p>她作势要挠我，被我一下躲开。然后一人一猫就这样扭打在了一起，轻松的气氛充满了整个房间。</p>
<h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>接下来的几天，我逐渐适应了有她在我身边的生活。</p>
<p>早上上班前能吃到热腾腾的早餐，晚上下班回到家有人欢迎并且做好了一桌子菜等着我回来，闲下来以后陪她玩一会……</p>
<p>我从未感觉生活如此美好。</p>
<p>一天我下班后去了医院看医生，因为最近几天有时头疼得厉害。医生给我开了一瓶新药，我便直接回家了。</p>
<p>“欢迎回家喵~”推开门少女依然像往常一样站在门口迎接我。</p>
<p>我摸了摸她的头，两只耳朵即时直立了起来，看起来好有精神呢。</p>
<p>和她一起吃完饭，我把今晚要吃的药吃下，然后像往常一样陪她玩。原来猫娘也喜欢逗猫棒啊。</p>
<p>为了不会忘记吃药，我在手机上调好了闹钟，每到吃药时间闹钟就会响起，这样就不会忘啦。</p>
<p>到了睡觉时间，她像往常一样缩到我的怀里。</p>
<p>好暖，好幸福。</p>
<p>但突然间一种郁闷感浮上我的心头。我在想，会不会一旦接触过这种温暖，我就再也回不去了呢？</p>
<p>少女也似乎察觉了我的异样。</p>
<p>“人类真奇怪，眼前明明还能看到微弱烛光，却还要为将来的黑暗提前感到害怕。”</p>
<p>少女的话安抚了我。至少我现在是幸福的，未来，管他呢。</p>
<p>我轻轻抱着她，慢慢睡着了。</p>
<h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>这几天不知道为什么，我们两个之间的感觉似乎有点低气压。</p>
<p>她还是会像往常一样欢迎下班的我回家，给我做饭，但是好像和往常又有点不同，两只耳朵经常是耷拉着的。</p>
<p>我试图通过摸她头和用逗猫棒逗她来让她精神点，有点用，但过不了多久又会变得无神。</p>
<p>今天我因为剧烈的头疼和头晕在公司请了一天假，她一直在我身边照顾着我。</p>
<p>“还是先睡觉休息会吧喵。”</p>
<p>我躺在床上，在她温柔的抚摸之下，听着她柔弱的呼吸声迷迷糊糊地睡着了。</p>
<p>不知道睡了多久，我被手机的闹钟吵醒。</p>
<p>我睁开粘连在一起的眼皮摸到了手机把闹钟关掉。</p>
<p>奇怪，她居然没有在床边陪我。</p>
<p>我顶着混乱的脑子站了起来，走出去看看这猫在干什么。</p>
<p>扫视了一眼，我的心开始紧张起来——她不见了。</p>
<p>从未有过如此崩溃的感觉，我两腿一软，一屁股坐在了地上。我全身颤抖，不断在地上蠕动。</p>
<p>好痛，像是身体裂开了一样。</p>
<p>“不会的……不会的，她一定只是出去了……”我嘴唇不断抖出这句话。</p>
<p>我要出去找她。</p>
<h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>一天……</p>
<p>两天……</p>
<p>三天……</p>
<p>日日夜夜，不知疲倦。</p>
<p>不断往复，夜以继日。</p>
<p>“你到底去哪了……”</p>
<p>手机响起我也无心停下，手无情地摸到电源键关掉。我心里只有一个声音——快点找到她。</p>
<p>我的头晕头痛又发作了，可是为了她，我不能停下。</p>
<p>日日夜夜，夜以继日。</p>
<p>如是往复，永不停歇。</p>
<p>究竟已经过去多少天了？</p>
<p>我只知道我依然没找她。</p>
<h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>下雨了。</p>
<p>我停止了发出声音，热闹的街道仿佛顷刻消失，随后而来的是一片寂静，只听得见那仿佛永不停息的污浊雨水在四周轰鸣。</p>
<p>又走到了那个熟悉的地方，我无力地望向第一次遇见她的那个方向。</p>
<p>会有奇迹吗？</p>
<p>在惨白的LED灯光下，一个头戴黑色猫耳装饰，飘着一头水蓝色头发，身穿黑色外套，下摆露出一小截短裙的少女正看向我的方向，身后好像还有一条垂至小腿的黑色尾巴在随风摇摆。</p>
<p>我的脑袋顿时炸开。</p>
<p>和那天一模一样。</p>
<p>我欣喜地朝着她的方向跑去，但她也一转身，向黑暗中跑去。</p>
<p>“等等我！”</p>
<p>我在她身后穷追不舍，绝对不能让她跑掉。</p>
<p>少女窜进了一栋楼里，迅速走进电梯按下楼顶的按钮。</p>
<p>“陪我到楼顶看烟花哦~”</p>
<p>我没能赶上电梯，电梯门最后的一丝缝隙砰的一声关上。</p>
<p>楼梯，快跑。</p>
<p>我感觉到我的肺就像一个被人强行吹起的气球，时时刻刻快要炸裂了。</p>
<p>终于跑到楼顶了，我大口喘着粗气。</p>
<p>砰——</p>
<p>一阵低沉的爆破音传到我的鼓膜。</p>
<p>我定定地看着站在楼顶边缘的她，她的眼瞳已经重新充满神采。</p>
<p>我慢慢地靠近她，一同凝视着这七彩流转的夜空。眼睛虚焦着向远方望去，万家灯火、蜿蜒车流、缤纷焰火，种种颜色化作浑圆不清的色块，映亮了我心中的空虚。</p>
<p>少女转过头来望着我，她的眼睛还是那么的清澈。</p>
<p>“要和我永远在一起吗？”</p>
<p>砰！！！——</p>
<p>象征着烟花表演结束的巨型烟花窜上天幕，直穿云霄，绽放的那一刻，是如此耀眼，照亮了整个夜空。短暂的美好很快就过去了，眼前的世界又逐渐的暗了下来。</p>
<p>灿烂只是一时的，黑夜才是永恒的。</p>
<p>她牵起了我的手，眼睛里倒映着我的模样——不知道多少天的高强度寻找，让我失神疲惫这个地步。</p>
<p>“要吗？”少女再次发出提问。</p>
<p>“要！”我的眼神里充满坚定，用力握住她的手。毕竟这样操蛋的生活，没了她又有什么意义呢。</p>
<p>夜晚的微风愈发浓稠，我在这浓稠液体中感到浮力越来越大，双脚离开了地面。</p>
<p>“让我们开始新的生活吧喵~”</p>
<h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>一栋高楼发生了一男子坠亡事件，楼下现场拉上了警戒线，一群警察正在调查死者。</p>
<p>死者头戴着一对黑色猫耳头饰，腰间绑了一根cosplay用的黑色猫尾巴。</p>
<p>警察A：“看看死者身上有没有什么物品吧。”</p>
<p>警察B摸了摸死者口袋，掏出了屏幕已经粉碎但还能正常点亮的手机，锁屏壁纸好像是死者自己的照片，也是戴着猫耳头饰。</p>
<p>嘀嘀嘀，手机响了起来，是闹钟。闹钟提醒上写着——吃药。</p>
<p>随后警察B又在死者口袋中掏出了一瓶药，药瓶上写着——氯丙嗪。</p>
<p>……</p>
<p>氯丙嗪适应症：</p>
<p>① 治疗精神病：用于控制精神分裂症或其他精神病的兴奋躁动、紧张不安、幻觉、妄想等症状，对忧郁症状及木僵症状的疗效较差。对Ⅱ型精神分裂症患者无效，甚至可加重病情。</p>
<p>② 镇吐：几乎对各种原因引起的呕吐，如尿毒症、胃肠炎、癌症、妊娠及药物引起的呕吐均有效。也可治疗顽固性呃逆。但对晕动病呕吐无效。</p>
<p>③ 低温麻醉及人工冬眠：用于低温麻醉时可防止休克发生。人工冬眠时，与哌替啶、异丙嗪配成冬眠合剂用于创伤性休克、中毒性休克、烧伤、高烧及甲状腺危象的辅助治疗。</p>
<p>④ 与镇痛药合用，治疗癌症晚期患者的剧痛。</p>
<p>⑤ 治疗心力衰竭。</p>
<p>⑥ 试用于治疗巨人症。</p>
<h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p>一段时间后，警察联系到该死者的家属，通知其来认尸。</p>
<p>录口供时，家属说到——</p>
<p>“这孩子其实是我十几年前在路边捡到的……”</p>
<p>“当时他身上浑身都是伤痕……”</p>
<p>“哪有这么没良心的父母啊把孩子打成这样还要抛弃……”</p>
]]></content>
      <categories>
        <category>短篇故事</category>
      </categories>
      <tags>
        <tag>故事</tag>
        <tag>猫娘</tag>
      </tags>
  </entry>
</search>
